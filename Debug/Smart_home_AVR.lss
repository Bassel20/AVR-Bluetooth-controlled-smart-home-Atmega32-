
Smart_home_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000036c  00800060  00001e6c  00001f00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008003cc  008003cc  0000226c  2**0
                  ALLOC
  3 .stab         00001c98  00000000  00000000  0000226c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000da1  00000000  00000000  00003f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004de5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007a89  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008838  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008998  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008c25  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000093f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e6       	ldi	r30, 0x6C	; 108
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	ac ec       	ldi	r26, 0xCC	; 204
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3d       	cpi	r26, 0xD9	; 217
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <main>
      8a:	0c 94 34 0f 	jmp	0x1e68	; 0x1e68 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fd 0e 	jmp	0x1dfa	; 0x1dfa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b3 e0       	ldi	r27, 0x03	; 3
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 19 0f 	jmp	0x1e32	; 0x1e32 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 09 0f 	jmp	0x1e12	; 0x1e12 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 25 0f 	jmp	0x1e4a	; 0x1e4a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 09 0f 	jmp	0x1e12	; 0x1e12 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 25 0f 	jmp	0x1e4a	; 0x1e4a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fd 0e 	jmp	0x1dfa	; 0x1dfa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	93 e0       	ldi	r25, 0x03	; 3
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 19 0f 	jmp	0x1e32	; 0x1e32 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 09 0f 	jmp	0x1e12	; 0x1e12 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 25 0f 	jmp	0x1e4a	; 0x1e4a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 09 0f 	jmp	0x1e12	; 0x1e12 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 25 0f 	jmp	0x1e4a	; 0x1e4a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 09 0f 	jmp	0x1e12	; 0x1e12 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 25 0f 	jmp	0x1e4a	; 0x1e4a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0d 0f 	jmp	0x1e1a	; 0x1e1a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <USART_voidInit>:

static u8 USART_u8BusyState = IDLE;


void USART_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8UCSRC = 0;					    // Local variable to hold the UCSRC register value
     b50:	19 82       	std	Y+1, r1	; 0x01


#if(USART_PARITY_DISABLED==USART_PARITY)        // Parity Mode
	CLR_BIT(Local_u8UCSRC,UCSRC_UPM1);
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	8f 7d       	andi	r24, 0xDF	; 223
     b56:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRC,UCSRC_UPM0);
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	8f 7e       	andi	r24, 0xEF	; 239
     b5c:	89 83       	std	Y+1, r24	; 0x01
#elif(USART_SEND_SIZE==USART_SEND_7_BIT)
	CLR_BIT(Local_u8UCSRC,UCSRC_UCSZ0);
	SET_BIT(Local_u8UCSRC,UCSRC_UCSZ1);
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
#elif(USART_SEND_SIZE==USART_SEND_8_BIT)
	SET_BIT(Local_u8UCSRC,UCSRC_UCSZ0);
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	82 60       	ori	r24, 0x02	; 2
     b62:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRC,UCSRC_UCSZ1);
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	84 60       	ori	r24, 0x04	; 4
     b68:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
     b6a:	aa e2       	ldi	r26, 0x2A	; 42
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ea e2       	ldi	r30, 0x2A	; 42
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8b 7f       	andi	r24, 0xFB	; 251
     b76:	8c 93       	st	X, r24
#error "Invalid USART Send Size Configuration"
#endif


#if(USART_STOP_1_BIT==USART_STOP_SIZE)          // Stop Bits Size
	CLR_BIT(Local_u8UCSRC,UCSRC_USBS);
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	87 7f       	andi	r24, 0xF7	; 247
     b7c:	89 83       	std	Y+1, r24	; 0x01
#else
#error "Invalid USART Stop Bits Configuration"
#endif

#if(USART_ASYNCHRNOUS_MODE==USART_OPERATION_MODE)
    CLR_BIT(Local_u8UCSRC,UCSRC_UMSEL);
     b7e:	89 81       	ldd	r24, Y+1	; 0x01
     b80:	8f 7b       	andi	r24, 0xBF	; 191
     b82:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(Local_u8UCSRC,UCSRC_UMSEL);
#else
#error "Invalid USART Operation mode"
#endif

	SET_BIT(UCSRB,UCSRB_TXEN);				// Transmitter enable
     b84:	aa e2       	ldi	r26, 0x2A	; 42
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	ea e2       	ldi	r30, 0x2A	; 42
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	88 60       	ori	r24, 0x08	; 8
     b90:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSRB_RXEN);				// Receiver enable
     b92:	aa e2       	ldi	r26, 0x2A	; 42
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	ea e2       	ldi	r30, 0x2A	; 42
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	80 61       	ori	r24, 0x10	; 16
     b9e:	8c 93       	st	X, r24

	SET_BIT(Local_u8UCSRC,UCSRC_URSEL); 	// select UCSRC register
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	80 68       	ori	r24, 0x80	; 128
     ba4:	89 83       	std	Y+1, r24	; 0x01

	UCSRC = Local_u8UCSRC;					// Assign UCSRC value in one operation
     ba6:	e0 e4       	ldi	r30, 0x40	; 64
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	80 83       	st	Z, r24

	UBRRL = 64;								// baud rate setting to 9600 bps, 10Mhz clock frequency
     bae:	e9 e2       	ldi	r30, 0x29	; 41
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	80 83       	st	Z, r24
	UBRRH = 0 ;
     bb6:	e0 e4       	ldi	r30, 0x40	; 64
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	10 82       	st	Z, r1
}
     bbc:	0f 90       	pop	r0
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <USART_u8Send>:

void USART_u8Send(u8 Copy_u8Data)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	0f 92       	push	r0
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA,UCSRA_UDRE) == 0 );	// wait until transmit buffer is empty
     bd0:	eb e2       	ldi	r30, 0x2B	; 43
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	82 95       	swap	r24
     bd8:	86 95       	lsr	r24
     bda:	87 70       	andi	r24, 0x07	; 7
     bdc:	88 2f       	mov	r24, r24
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	81 70       	andi	r24, 0x01	; 1
     be2:	90 70       	andi	r25, 0x00	; 0
     be4:	00 97       	sbiw	r24, 0x00	; 0
     be6:	a1 f3       	breq	.-24     	; 0xbd0 <USART_u8Send+0xc>
	UDR=Copy_u8Data;						// send the data
     be8:	ec e2       	ldi	r30, 0x2C	; 44
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	80 83       	st	Z, r24
}
     bf0:	0f 90       	pop	r0
     bf2:	cf 91       	pop	r28
     bf4:	df 91       	pop	r29
     bf6:	08 95       	ret

00000bf8 <USART_u8SendCharSynch>:

u8 USART_u8SendCharSynch(u8 Copy_u8Data)
{
     bf8:	df 93       	push	r29
     bfa:	cf 93       	push	r28
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <USART_u8SendCharSynch+0x6>
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <USART_u8SendCharSynch+0x8>
     c00:	00 d0       	rcall	.+0      	; 0xc02 <USART_u8SendCharSynch+0xa>
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	8e 83       	std	Y+6, r24	; 0x06
    u8 Local_u8ErrorState = OK;
     c08:	1d 82       	std	Y+5, r1	; 0x05

    if(USART_u8BusyState==IDLE)
     c0a:	80 91 cc 03 	lds	r24, 0x03CC
     c0e:	88 23       	and	r24, r24
     c10:	e1 f5       	brne	.+120    	; 0xc8a <USART_u8SendCharSynch+0x92>
    {
        u32 Local_u32Counter = 0;
     c12:	19 82       	std	Y+1, r1	; 0x01
     c14:	1a 82       	std	Y+2, r1	; 0x02
     c16:	1b 82       	std	Y+3, r1	; 0x03
     c18:	1c 82       	std	Y+4, r1	; 0x04
     c1a:	0b c0       	rjmp	.+22     	; 0xc32 <USART_u8SendCharSynch+0x3a>

        /* Polling for Transmit Buffer */
        while(((GET_BIT(UCSRA,UCSRA_UDRE))==0) && (Local_u32Counter != USART_u32TIMEOUT ))
        {
            Local_u32Counter++;
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	9a 81       	ldd	r25, Y+2	; 0x02
     c20:	ab 81       	ldd	r26, Y+3	; 0x03
     c22:	bc 81       	ldd	r27, Y+4	; 0x04
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	a1 1d       	adc	r26, r1
     c28:	b1 1d       	adc	r27, r1
     c2a:	89 83       	std	Y+1, r24	; 0x01
     c2c:	9a 83       	std	Y+2, r25	; 0x02
     c2e:	ab 83       	std	Y+3, r26	; 0x03
     c30:	bc 83       	std	Y+4, r27	; 0x04
    if(USART_u8BusyState==IDLE)
    {
        u32 Local_u32Counter = 0;

        /* Polling for Transmit Buffer */
        while(((GET_BIT(UCSRA,UCSRA_UDRE))==0) && (Local_u32Counter != USART_u32TIMEOUT ))
     c32:	eb e2       	ldi	r30, 0x2B	; 43
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	82 95       	swap	r24
     c3a:	86 95       	lsr	r24
     c3c:	87 70       	andi	r24, 0x07	; 7
     c3e:	88 2f       	mov	r24, r24
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	81 70       	andi	r24, 0x01	; 1
     c44:	90 70       	andi	r25, 0x00	; 0
     c46:	00 97       	sbiw	r24, 0x00	; 0
     c48:	61 f4       	brne	.+24     	; 0xc62 <USART_u8SendCharSynch+0x6a>
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	9a 81       	ldd	r25, Y+2	; 0x02
     c4e:	ab 81       	ldd	r26, Y+3	; 0x03
     c50:	bc 81       	ldd	r27, Y+4	; 0x04
     c52:	80 35       	cpi	r24, 0x50	; 80
     c54:	23 ec       	ldi	r18, 0xC3	; 195
     c56:	92 07       	cpc	r25, r18
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	a2 07       	cpc	r26, r18
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	b2 07       	cpc	r27, r18
     c60:	e9 f6       	brne	.-70     	; 0xc1c <USART_u8SendCharSynch+0x24>
        {
            Local_u32Counter++;
        }
        if(Local_u32Counter != USART_u32TIMEOUT)
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	9a 81       	ldd	r25, Y+2	; 0x02
     c66:	ab 81       	ldd	r26, Y+3	; 0x03
     c68:	bc 81       	ldd	r27, Y+4	; 0x04
     c6a:	80 35       	cpi	r24, 0x50	; 80
     c6c:	23 ec       	ldi	r18, 0xC3	; 195
     c6e:	92 07       	cpc	r25, r18
     c70:	20 e0       	ldi	r18, 0x00	; 0
     c72:	a2 07       	cpc	r26, r18
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	b2 07       	cpc	r27, r18
     c78:	29 f0       	breq	.+10     	; 0xc84 <USART_u8SendCharSynch+0x8c>
        {
            UDR = Copy_u8Data;
     c7a:	ec e2       	ldi	r30, 0x2C	; 44
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	8e 81       	ldd	r24, Y+6	; 0x06
     c80:	80 83       	st	Z, r24
     c82:	05 c0       	rjmp	.+10     	; 0xc8e <USART_u8SendCharSynch+0x96>
        }
        else
        {
            Local_u8ErrorState = NOK;
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8d 83       	std	Y+5, r24	; 0x05
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <USART_u8SendCharSynch+0x96>
        }
    }
    else
    {
        Local_u8ErrorState = BUSY_FUNC;
     c8a:	83 e0       	ldi	r24, 0x03	; 3
     c8c:	8d 83       	std	Y+5, r24	; 0x05
    }
    return Local_u8ErrorState;
     c8e:	8d 81       	ldd	r24, Y+5	; 0x05
}
     c90:	26 96       	adiw	r28, 0x06	; 6
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	f8 94       	cli
     c96:	de bf       	out	0x3e, r29	; 62
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	cd bf       	out	0x3d, r28	; 61
     c9c:	cf 91       	pop	r28
     c9e:	df 91       	pop	r29
     ca0:	08 95       	ret

00000ca2 <USART_SendString>:

void USART_SendString(char *string)
{
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <USART_SendString+0x6>
     ca8:	00 d0       	rcall	.+0      	; 0xcaa <USART_SendString+0x8>
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	9c 83       	std	Y+4, r25	; 0x04
     cb0:	8b 83       	std	Y+3, r24	; 0x03
	int p = 0;
     cb2:	1a 82       	std	Y+2, r1	; 0x02
     cb4:	19 82       	std	Y+1, r1	; 0x01
     cb6:	0f c0       	rjmp	.+30     	; 0xcd6 <USART_SendString+0x34>
	while (string[p] != 0)
	{
		USART_u8Send(string[p]);
     cb8:	29 81       	ldd	r18, Y+1	; 0x01
     cba:	3a 81       	ldd	r19, Y+2	; 0x02
     cbc:	8b 81       	ldd	r24, Y+3	; 0x03
     cbe:	9c 81       	ldd	r25, Y+4	; 0x04
     cc0:	fc 01       	movw	r30, r24
     cc2:	e2 0f       	add	r30, r18
     cc4:	f3 1f       	adc	r31, r19
     cc6:	80 81       	ld	r24, Z
     cc8:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <USART_u8Send>
		p++;
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	9a 81       	ldd	r25, Y+2	; 0x02
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	9a 83       	std	Y+2, r25	; 0x02
     cd4:	89 83       	std	Y+1, r24	; 0x01
}

void USART_SendString(char *string)
{
	int p = 0;
	while (string[p] != 0)
     cd6:	29 81       	ldd	r18, Y+1	; 0x01
     cd8:	3a 81       	ldd	r19, Y+2	; 0x02
     cda:	8b 81       	ldd	r24, Y+3	; 0x03
     cdc:	9c 81       	ldd	r25, Y+4	; 0x04
     cde:	fc 01       	movw	r30, r24
     ce0:	e2 0f       	add	r30, r18
     ce2:	f3 1f       	adc	r31, r19
     ce4:	80 81       	ld	r24, Z
     ce6:	88 23       	and	r24, r24
     ce8:	39 f7       	brne	.-50     	; 0xcb8 <USART_SendString+0x16>
	{
		USART_u8Send(string[p]);
		p++;
	}
}
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	cf 91       	pop	r28
     cf4:	df 91       	pop	r29
     cf6:	08 95       	ret

00000cf8 <USART_u8Receive>:

u8 USART_u8Receive(void)
{
     cf8:	df 93       	push	r29
     cfa:	cf 93       	push	r28
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,UCSRA_RXC) == 0 );	// Wait for the receive complete flag to be up
     d00:	eb e2       	ldi	r30, 0x2B	; 43
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	88 23       	and	r24, r24
     d08:	dc f7       	brge	.-10     	; 0xd00 <USART_u8Receive+0x8>
	return UDR;								// Return the received data
     d0a:	ec e2       	ldi	r30, 0x2C	; 44
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
}
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <USART_u8ReceiveCharSynch>:

u8 USART_u8ReceiveCharSynch(u8* Copy_pu8ReceivedData)
{
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	00 d0       	rcall	.+0      	; 0xd1c <USART_u8ReceiveCharSynch+0x6>
     d1c:	0f 92       	push	r0
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	9b 83       	std	Y+3, r25	; 0x03
     d24:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
     d26:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu8ReceivedData != NULL)
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	9b 81       	ldd	r25, Y+3	; 0x03
     d2c:	00 97       	sbiw	r24, 0x00	; 0
     d2e:	61 f0       	breq	.+24     	; 0xd48 <USART_u8ReceiveCharSynch+0x32>
	{
		while((GET_BIT(UCSRA,UCSRA_RXC))==0);	//Waiting for data to be received
     d30:	eb e2       	ldi	r30, 0x2B	; 43
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	88 23       	and	r24, r24
     d38:	dc f7       	brge	.-10     	; 0xd30 <USART_u8ReceiveCharSynch+0x1a>
		*Copy_pu8ReceivedData = UDR;
     d3a:	ec e2       	ldi	r30, 0x2C	; 44
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	ea 81       	ldd	r30, Y+2	; 0x02
     d42:	fb 81       	ldd	r31, Y+3	; 0x03
     d44:	80 83       	st	Z, r24
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <USART_u8ReceiveCharSynch+0x36>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER;
     d48:	82 e0       	ldi	r24, 0x02	; 2
     d4a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
}
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	cf 91       	pop	r28
     d56:	df 91       	pop	r29
     d58:	08 95       	ret

00000d5a <USART_u8ReceiveBufferSynch>:

u8 USART_u8ReceiveBufferSynch(u8* Copy_pu8Buffer, u8 Copy_u8BufferSize)
{
     d5a:	df 93       	push	r29
     d5c:	cf 93       	push	r28
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <USART_u8ReceiveBufferSynch+0x6>
     d60:	00 d0       	rcall	.+0      	; 0xd62 <USART_u8ReceiveBufferSynch+0x8>
     d62:	0f 92       	push	r0
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	9c 83       	std	Y+4, r25	; 0x04
     d6a:	8b 83       	std	Y+3, r24	; 0x03
     d6c:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8ErrorState=OK;
     d6e:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_pu8Buffer != NULL)
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	9c 81       	ldd	r25, Y+4	; 0x04
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	a1 f0       	breq	.+40     	; 0xda0 <USART_u8ReceiveBufferSynch+0x46>
	{
		u8 Local_u8Counter;

		for(Local_u8Counter = 0; Local_u8Counter < Copy_u8BufferSize; Local_u8Counter++)
     d78:	19 82       	std	Y+1, r1	; 0x01
     d7a:	0d c0       	rjmp	.+26     	; 0xd96 <USART_u8ReceiveBufferSynch+0x3c>
		{
			Local_u8ErrorState = USART_u8ReceiveCharSynch(Copy_pu8Buffer + Local_u8Counter);
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	9c 81       	ldd	r25, Y+4	; 0x04
     d86:	82 0f       	add	r24, r18
     d88:	93 1f       	adc	r25, r19
     d8a:	0e 94 8b 06 	call	0xd16	; 0xd16 <USART_u8ReceiveCharSynch>
     d8e:	8a 83       	std	Y+2, r24	; 0x02

	if(Copy_pu8Buffer != NULL)
	{
		u8 Local_u8Counter;

		for(Local_u8Counter = 0; Local_u8Counter < Copy_u8BufferSize; Local_u8Counter++)
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	8f 5f       	subi	r24, 0xFF	; 255
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	99 81       	ldd	r25, Y+1	; 0x01
     d98:	8d 81       	ldd	r24, Y+5	; 0x05
     d9a:	98 17       	cp	r25, r24
     d9c:	78 f3       	brcs	.-34     	; 0xd7c <USART_u8ReceiveBufferSynch+0x22>
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <USART_u8ReceiveBufferSynch+0x4a>
			Local_u8ErrorState = USART_u8ReceiveCharSynch(Copy_pu8Buffer + Local_u8Counter);
		}
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER;
     da0:	82 e0       	ldi	r24, 0x02	; 2
     da2:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_u8ErrorState;
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
}
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	08 95       	ret

00000db6 <USART_voidDisable>:

void USART_voidDisable(void)
{
     db6:	df 93       	push	r29
     db8:	cf 93       	push	r28
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(UCSRB,UCSRB_TXEN);	// Disable Transmit
     dbe:	aa e2       	ldi	r26, 0x2A	; 42
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	ea e2       	ldi	r30, 0x2A	; 42
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	87 7f       	andi	r24, 0xF7	; 247
     dca:	8c 93       	st	X, r24
    CLR_BIT(UCSRB,UCSRB_RXEN);	// Disable Receive
     dcc:	aa e2       	ldi	r26, 0x2A	; 42
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	ea e2       	ldi	r30, 0x2A	; 42
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	8f 7e       	andi	r24, 0xEF	; 239
     dd8:	8c 93       	st	X, r24
}
     dda:	cf 91       	pop	r28
     ddc:	df 91       	pop	r29
     dde:	08 95       	ret

00000de0 <DIO_u8SetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_register.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Direction)
{
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	28 97       	sbiw	r28, 0x08	; 8
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	cd bf       	out	0x3d, r28	; 61
     df4:	8a 83       	std	Y+2, r24	; 0x02
     df6:	6b 83       	std	Y+3, r22	; 0x03
     df8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState= OK;
     dfa:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	88 30       	cpi	r24, 0x08	; 8
     e00:	08 f0       	brcs	.+2      	; 0xe04 <DIO_u8SetPinDirection+0x24>
     e02:	f4 c0       	rjmp	.+488    	; 0xfec <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
     e04:	8c 81       	ldd	r24, Y+4	; 0x04
     e06:	88 23       	and	r24, r24
     e08:	09 f0       	breq	.+2      	; 0xe0c <DIO_u8SetPinDirection+0x2c>
     e0a:	77 c0       	rjmp	.+238    	; 0xefa <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	38 87       	std	Y+8, r19	; 0x08
     e14:	2f 83       	std	Y+7, r18	; 0x07
     e16:	8f 81       	ldd	r24, Y+7	; 0x07
     e18:	98 85       	ldd	r25, Y+8	; 0x08
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	91 05       	cpc	r25, r1
     e1e:	59 f1       	breq	.+86     	; 0xe76 <DIO_u8SetPinDirection+0x96>
     e20:	2f 81       	ldd	r18, Y+7	; 0x07
     e22:	38 85       	ldd	r19, Y+8	; 0x08
     e24:	22 30       	cpi	r18, 0x02	; 2
     e26:	31 05       	cpc	r19, r1
     e28:	2c f4       	brge	.+10     	; 0xe34 <DIO_u8SetPinDirection+0x54>
     e2a:	8f 81       	ldd	r24, Y+7	; 0x07
     e2c:	98 85       	ldd	r25, Y+8	; 0x08
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	69 f0       	breq	.+26     	; 0xe4c <DIO_u8SetPinDirection+0x6c>
     e32:	60 c0       	rjmp	.+192    	; 0xef4 <DIO_u8SetPinDirection+0x114>
     e34:	2f 81       	ldd	r18, Y+7	; 0x07
     e36:	38 85       	ldd	r19, Y+8	; 0x08
     e38:	22 30       	cpi	r18, 0x02	; 2
     e3a:	31 05       	cpc	r19, r1
     e3c:	89 f1       	breq	.+98     	; 0xea0 <DIO_u8SetPinDirection+0xc0>
     e3e:	8f 81       	ldd	r24, Y+7	; 0x07
     e40:	98 85       	ldd	r25, Y+8	; 0x08
     e42:	83 30       	cpi	r24, 0x03	; 3
     e44:	91 05       	cpc	r25, r1
     e46:	09 f4       	brne	.+2      	; 0xe4a <DIO_u8SetPinDirection+0x6a>
     e48:	40 c0       	rjmp	.+128    	; 0xeca <DIO_u8SetPinDirection+0xea>
     e4a:	54 c0       	rjmp	.+168    	; 0xef4 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
     e4c:	aa e3       	ldi	r26, 0x3A	; 58
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	ea e3       	ldi	r30, 0x3A	; 58
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	48 2f       	mov	r20, r24
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	02 2e       	mov	r0, r18
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <DIO_u8SetPinDirection+0x8a>
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	0a 94       	dec	r0
     e6c:	e2 f7       	brpl	.-8      	; 0xe66 <DIO_u8SetPinDirection+0x86>
     e6e:	80 95       	com	r24
     e70:	84 23       	and	r24, r20
     e72:	8c 93       	st	X, r24
     e74:	bd c0       	rjmp	.+378    	; 0xff0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
     e76:	a7 e3       	ldi	r26, 0x37	; 55
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e7 e3       	ldi	r30, 0x37	; 55
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 2e       	mov	r0, r18
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <DIO_u8SetPinDirection+0xb4>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	0a 94       	dec	r0
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <DIO_u8SetPinDirection+0xb0>
     e98:	80 95       	com	r24
     e9a:	84 23       	and	r24, r20
     e9c:	8c 93       	st	X, r24
     e9e:	a8 c0       	rjmp	.+336    	; 0xff0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
     ea0:	a4 e3       	ldi	r26, 0x34	; 52
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e4 e3       	ldi	r30, 0x34	; 52
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	48 2f       	mov	r20, r24
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	02 2e       	mov	r0, r18
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <DIO_u8SetPinDirection+0xde>
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	0a 94       	dec	r0
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <DIO_u8SetPinDirection+0xda>
     ec2:	80 95       	com	r24
     ec4:	84 23       	and	r24, r20
     ec6:	8c 93       	st	X, r24
     ec8:	93 c0       	rjmp	.+294    	; 0xff0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
     eca:	a1 e3       	ldi	r26, 0x31	; 49
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e1 e3       	ldi	r30, 0x31	; 49
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	48 2f       	mov	r20, r24
     ed6:	8b 81       	ldd	r24, Y+3	; 0x03
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	02 2e       	mov	r0, r18
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <DIO_u8SetPinDirection+0x108>
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	0a 94       	dec	r0
     eea:	e2 f7       	brpl	.-8      	; 0xee4 <DIO_u8SetPinDirection+0x104>
     eec:	80 95       	com	r24
     eee:	84 23       	and	r24, r20
     ef0:	8c 93       	st	X, r24
     ef2:	7e c0       	rjmp	.+252    	; 0xff0 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=NOK; 			break;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	89 83       	std	Y+1, r24	; 0x01
     ef8:	7b c0       	rjmp	.+246    	; 0xff0 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
     efa:	8c 81       	ldd	r24, Y+4	; 0x04
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	09 f0       	breq	.+2      	; 0xf02 <DIO_u8SetPinDirection+0x122>
     f00:	72 c0       	rjmp	.+228    	; 0xfe6 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	3e 83       	std	Y+6, r19	; 0x06
     f0a:	2d 83       	std	Y+5, r18	; 0x05
     f0c:	8d 81       	ldd	r24, Y+5	; 0x05
     f0e:	9e 81       	ldd	r25, Y+6	; 0x06
     f10:	81 30       	cpi	r24, 0x01	; 1
     f12:	91 05       	cpc	r25, r1
     f14:	49 f1       	breq	.+82     	; 0xf68 <DIO_u8SetPinDirection+0x188>
     f16:	2d 81       	ldd	r18, Y+5	; 0x05
     f18:	3e 81       	ldd	r19, Y+6	; 0x06
     f1a:	22 30       	cpi	r18, 0x02	; 2
     f1c:	31 05       	cpc	r19, r1
     f1e:	2c f4       	brge	.+10     	; 0xf2a <DIO_u8SetPinDirection+0x14a>
     f20:	8d 81       	ldd	r24, Y+5	; 0x05
     f22:	9e 81       	ldd	r25, Y+6	; 0x06
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	61 f0       	breq	.+24     	; 0xf40 <DIO_u8SetPinDirection+0x160>
     f28:	5b c0       	rjmp	.+182    	; 0xfe0 <DIO_u8SetPinDirection+0x200>
     f2a:	2d 81       	ldd	r18, Y+5	; 0x05
     f2c:	3e 81       	ldd	r19, Y+6	; 0x06
     f2e:	22 30       	cpi	r18, 0x02	; 2
     f30:	31 05       	cpc	r19, r1
     f32:	71 f1       	breq	.+92     	; 0xf90 <DIO_u8SetPinDirection+0x1b0>
     f34:	8d 81       	ldd	r24, Y+5	; 0x05
     f36:	9e 81       	ldd	r25, Y+6	; 0x06
     f38:	83 30       	cpi	r24, 0x03	; 3
     f3a:	91 05       	cpc	r25, r1
     f3c:	e9 f1       	breq	.+122    	; 0xfb8 <DIO_u8SetPinDirection+0x1d8>
     f3e:	50 c0       	rjmp	.+160    	; 0xfe0 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
     f40:	aa e3       	ldi	r26, 0x3A	; 58
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	ea e3       	ldi	r30, 0x3A	; 58
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_u8SetPinDirection+0x17e>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <DIO_u8SetPinDirection+0x17a>
     f62:	84 2b       	or	r24, r20
     f64:	8c 93       	st	X, r24
     f66:	44 c0       	rjmp	.+136    	; 0xff0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
     f68:	a7 e3       	ldi	r26, 0x37	; 55
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e7 e3       	ldi	r30, 0x37	; 55
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	48 2f       	mov	r20, r24
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	02 2e       	mov	r0, r18
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <DIO_u8SetPinDirection+0x1a6>
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	0a 94       	dec	r0
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <DIO_u8SetPinDirection+0x1a2>
     f8a:	84 2b       	or	r24, r20
     f8c:	8c 93       	st	X, r24
     f8e:	30 c0       	rjmp	.+96     	; 0xff0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
     f90:	a4 e3       	ldi	r26, 0x34	; 52
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e4 e3       	ldi	r30, 0x34	; 52
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	48 2f       	mov	r20, r24
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	02 2e       	mov	r0, r18
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <DIO_u8SetPinDirection+0x1ce>
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	0a 94       	dec	r0
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <DIO_u8SetPinDirection+0x1ca>
     fb2:	84 2b       	or	r24, r20
     fb4:	8c 93       	st	X, r24
     fb6:	1c c0       	rjmp	.+56     	; 0xff0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
     fb8:	a1 e3       	ldi	r26, 0x31	; 49
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e1 e3       	ldi	r30, 0x31	; 49
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	48 2f       	mov	r20, r24
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	02 2e       	mov	r0, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_u8SetPinDirection+0x1f6>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_u8SetPinDirection+0x1f2>
     fda:	84 2b       	or	r24, r20
     fdc:	8c 93       	st	X, r24
     fde:	08 c0       	rjmp	.+16     	; 0xff0 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=NOK; 			break;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	89 83       	std	Y+1, r24	; 0x01
     fe4:	05 c0       	rjmp	.+10     	; 0xff0 <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=NOK;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	89 83       	std	Y+1, r24	; 0x01
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ff2:	28 96       	adiw	r28, 0x08	; 8
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	00 d0       	rcall	.+0      	; 0x100a <DIO_u8SetPortDirection+0x6>
    100a:	00 d0       	rcall	.+0      	; 0x100c <DIO_u8SetPortDirection+0x8>
    100c:	0f 92       	push	r0
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	8a 83       	std	Y+2, r24	; 0x02
    1014:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState= OK;
    1016:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	3d 83       	std	Y+5, r19	; 0x05
    1020:	2c 83       	std	Y+4, r18	; 0x04
    1022:	8c 81       	ldd	r24, Y+4	; 0x04
    1024:	9d 81       	ldd	r25, Y+5	; 0x05
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	91 05       	cpc	r25, r1
    102a:	d1 f0       	breq	.+52     	; 0x1060 <DIO_u8SetPortDirection+0x5c>
    102c:	2c 81       	ldd	r18, Y+4	; 0x04
    102e:	3d 81       	ldd	r19, Y+5	; 0x05
    1030:	22 30       	cpi	r18, 0x02	; 2
    1032:	31 05       	cpc	r19, r1
    1034:	2c f4       	brge	.+10     	; 0x1040 <DIO_u8SetPortDirection+0x3c>
    1036:	8c 81       	ldd	r24, Y+4	; 0x04
    1038:	9d 81       	ldd	r25, Y+5	; 0x05
    103a:	00 97       	sbiw	r24, 0x00	; 0
    103c:	61 f0       	breq	.+24     	; 0x1056 <DIO_u8SetPortDirection+0x52>
    103e:	1f c0       	rjmp	.+62     	; 0x107e <DIO_u8SetPortDirection+0x7a>
    1040:	2c 81       	ldd	r18, Y+4	; 0x04
    1042:	3d 81       	ldd	r19, Y+5	; 0x05
    1044:	22 30       	cpi	r18, 0x02	; 2
    1046:	31 05       	cpc	r19, r1
    1048:	81 f0       	breq	.+32     	; 0x106a <DIO_u8SetPortDirection+0x66>
    104a:	8c 81       	ldd	r24, Y+4	; 0x04
    104c:	9d 81       	ldd	r25, Y+5	; 0x05
    104e:	83 30       	cpi	r24, 0x03	; 3
    1050:	91 05       	cpc	r25, r1
    1052:	81 f0       	breq	.+32     	; 0x1074 <DIO_u8SetPortDirection+0x70>
    1054:	14 c0       	rjmp	.+40     	; 0x107e <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA= Copy_u8Direction; break;
    1056:	ea e3       	ldi	r30, 0x3A	; 58
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	80 83       	st	Z, r24
    105e:	11 c0       	rjmp	.+34     	; 0x1082 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB= Copy_u8Direction; break;
    1060:	e7 e3       	ldi	r30, 0x37	; 55
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	80 83       	st	Z, r24
    1068:	0c c0       	rjmp	.+24     	; 0x1082 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC= Copy_u8Direction; break;
    106a:	e4 e3       	ldi	r30, 0x34	; 52
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	80 83       	st	Z, r24
    1072:	07 c0       	rjmp	.+14     	; 0x1082 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD= Copy_u8Direction; break;
    1074:	e1 e3       	ldi	r30, 0x31	; 49
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	80 83       	st	Z, r24
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=NOK; 		  break;
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1082:	89 81       	ldd	r24, Y+1	; 0x01
}
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	08 95       	ret

00001094 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	28 97       	sbiw	r28, 0x08	; 8
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	8a 83       	std	Y+2, r24	; 0x02
    10aa:	6b 83       	std	Y+3, r22	; 0x03
    10ac:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState= OK;
    10ae:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	88 30       	cpi	r24, 0x08	; 8
    10b4:	08 f0       	brcs	.+2      	; 0x10b8 <DIO_u8SetPinValue+0x24>
    10b6:	f4 c0       	rjmp	.+488    	; 0x12a0 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    10b8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ba:	88 23       	and	r24, r24
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <DIO_u8SetPinValue+0x2c>
    10be:	77 c0       	rjmp	.+238    	; 0x11ae <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	38 87       	std	Y+8, r19	; 0x08
    10c8:	2f 83       	std	Y+7, r18	; 0x07
    10ca:	8f 81       	ldd	r24, Y+7	; 0x07
    10cc:	98 85       	ldd	r25, Y+8	; 0x08
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	91 05       	cpc	r25, r1
    10d2:	59 f1       	breq	.+86     	; 0x112a <DIO_u8SetPinValue+0x96>
    10d4:	2f 81       	ldd	r18, Y+7	; 0x07
    10d6:	38 85       	ldd	r19, Y+8	; 0x08
    10d8:	22 30       	cpi	r18, 0x02	; 2
    10da:	31 05       	cpc	r19, r1
    10dc:	2c f4       	brge	.+10     	; 0x10e8 <DIO_u8SetPinValue+0x54>
    10de:	8f 81       	ldd	r24, Y+7	; 0x07
    10e0:	98 85       	ldd	r25, Y+8	; 0x08
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	69 f0       	breq	.+26     	; 0x1100 <DIO_u8SetPinValue+0x6c>
    10e6:	60 c0       	rjmp	.+192    	; 0x11a8 <DIO_u8SetPinValue+0x114>
    10e8:	2f 81       	ldd	r18, Y+7	; 0x07
    10ea:	38 85       	ldd	r19, Y+8	; 0x08
    10ec:	22 30       	cpi	r18, 0x02	; 2
    10ee:	31 05       	cpc	r19, r1
    10f0:	89 f1       	breq	.+98     	; 0x1154 <DIO_u8SetPinValue+0xc0>
    10f2:	8f 81       	ldd	r24, Y+7	; 0x07
    10f4:	98 85       	ldd	r25, Y+8	; 0x08
    10f6:	83 30       	cpi	r24, 0x03	; 3
    10f8:	91 05       	cpc	r25, r1
    10fa:	09 f4       	brne	.+2      	; 0x10fe <DIO_u8SetPinValue+0x6a>
    10fc:	40 c0       	rjmp	.+128    	; 0x117e <DIO_u8SetPinValue+0xea>
    10fe:	54 c0       	rjmp	.+168    	; 0x11a8 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    1100:	ab e3       	ldi	r26, 0x3B	; 59
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	48 2f       	mov	r20, r24
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	02 2e       	mov	r0, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <DIO_u8SetPinValue+0x8a>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	0a 94       	dec	r0
    1120:	e2 f7       	brpl	.-8      	; 0x111a <DIO_u8SetPinValue+0x86>
    1122:	80 95       	com	r24
    1124:	84 23       	and	r24, r20
    1126:	8c 93       	st	X, r24
    1128:	bd c0       	rjmp	.+378    	; 0x12a4 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    112a:	a8 e3       	ldi	r26, 0x38	; 56
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e8 e3       	ldi	r30, 0x38	; 56
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	48 2f       	mov	r20, r24
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	02 2e       	mov	r0, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <DIO_u8SetPinValue+0xb4>
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	0a 94       	dec	r0
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <DIO_u8SetPinValue+0xb0>
    114c:	80 95       	com	r24
    114e:	84 23       	and	r24, r20
    1150:	8c 93       	st	X, r24
    1152:	a8 c0       	rjmp	.+336    	; 0x12a4 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    1154:	a5 e3       	ldi	r26, 0x35	; 53
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e5 e3       	ldi	r30, 0x35	; 53
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	48 2f       	mov	r20, r24
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	02 2e       	mov	r0, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <DIO_u8SetPinValue+0xde>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <DIO_u8SetPinValue+0xda>
    1176:	80 95       	com	r24
    1178:	84 23       	and	r24, r20
    117a:	8c 93       	st	X, r24
    117c:	93 c0       	rjmp	.+294    	; 0x12a4 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    117e:	a2 e3       	ldi	r26, 0x32	; 50
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e2 e3       	ldi	r30, 0x32	; 50
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	48 2f       	mov	r20, r24
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	02 2e       	mov	r0, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <DIO_u8SetPinValue+0x108>
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	0a 94       	dec	r0
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <DIO_u8SetPinValue+0x104>
    11a0:	80 95       	com	r24
    11a2:	84 23       	and	r24, r20
    11a4:	8c 93       	st	X, r24
    11a6:	7e c0       	rjmp	.+252    	; 0x12a4 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=NOK; 			break;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	89 83       	std	Y+1, r24	; 0x01
    11ac:	7b c0       	rjmp	.+246    	; 0x12a4 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
    11ae:	8c 81       	ldd	r24, Y+4	; 0x04
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	09 f0       	breq	.+2      	; 0x11b6 <DIO_u8SetPinValue+0x122>
    11b4:	72 c0       	rjmp	.+228    	; 0x129a <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	3e 83       	std	Y+6, r19	; 0x06
    11be:	2d 83       	std	Y+5, r18	; 0x05
    11c0:	8d 81       	ldd	r24, Y+5	; 0x05
    11c2:	9e 81       	ldd	r25, Y+6	; 0x06
    11c4:	81 30       	cpi	r24, 0x01	; 1
    11c6:	91 05       	cpc	r25, r1
    11c8:	49 f1       	breq	.+82     	; 0x121c <DIO_u8SetPinValue+0x188>
    11ca:	2d 81       	ldd	r18, Y+5	; 0x05
    11cc:	3e 81       	ldd	r19, Y+6	; 0x06
    11ce:	22 30       	cpi	r18, 0x02	; 2
    11d0:	31 05       	cpc	r19, r1
    11d2:	2c f4       	brge	.+10     	; 0x11de <DIO_u8SetPinValue+0x14a>
    11d4:	8d 81       	ldd	r24, Y+5	; 0x05
    11d6:	9e 81       	ldd	r25, Y+6	; 0x06
    11d8:	00 97       	sbiw	r24, 0x00	; 0
    11da:	61 f0       	breq	.+24     	; 0x11f4 <DIO_u8SetPinValue+0x160>
    11dc:	5b c0       	rjmp	.+182    	; 0x1294 <DIO_u8SetPinValue+0x200>
    11de:	2d 81       	ldd	r18, Y+5	; 0x05
    11e0:	3e 81       	ldd	r19, Y+6	; 0x06
    11e2:	22 30       	cpi	r18, 0x02	; 2
    11e4:	31 05       	cpc	r19, r1
    11e6:	71 f1       	breq	.+92     	; 0x1244 <DIO_u8SetPinValue+0x1b0>
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	9e 81       	ldd	r25, Y+6	; 0x06
    11ec:	83 30       	cpi	r24, 0x03	; 3
    11ee:	91 05       	cpc	r25, r1
    11f0:	e9 f1       	breq	.+122    	; 0x126c <DIO_u8SetPinValue+0x1d8>
    11f2:	50 c0       	rjmp	.+160    	; 0x1294 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    11f4:	ab e3       	ldi	r26, 0x3B	; 59
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	eb e3       	ldi	r30, 0x3B	; 59
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	48 2f       	mov	r20, r24
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	02 2e       	mov	r0, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <DIO_u8SetPinValue+0x17e>
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	0a 94       	dec	r0
    1214:	e2 f7       	brpl	.-8      	; 0x120e <DIO_u8SetPinValue+0x17a>
    1216:	84 2b       	or	r24, r20
    1218:	8c 93       	st	X, r24
    121a:	44 c0       	rjmp	.+136    	; 0x12a4 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    121c:	a8 e3       	ldi	r26, 0x38	; 56
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e8 e3       	ldi	r30, 0x38	; 56
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	48 2f       	mov	r20, r24
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	02 2e       	mov	r0, r18
    1234:	02 c0       	rjmp	.+4      	; 0x123a <DIO_u8SetPinValue+0x1a6>
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	0a 94       	dec	r0
    123c:	e2 f7       	brpl	.-8      	; 0x1236 <DIO_u8SetPinValue+0x1a2>
    123e:	84 2b       	or	r24, r20
    1240:	8c 93       	st	X, r24
    1242:	30 c0       	rjmp	.+96     	; 0x12a4 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    1244:	a5 e3       	ldi	r26, 0x35	; 53
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e5 e3       	ldi	r30, 0x35	; 53
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	48 2f       	mov	r20, r24
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 2e       	mov	r0, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <DIO_u8SetPinValue+0x1ce>
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	0a 94       	dec	r0
    1264:	e2 f7       	brpl	.-8      	; 0x125e <DIO_u8SetPinValue+0x1ca>
    1266:	84 2b       	or	r24, r20
    1268:	8c 93       	st	X, r24
    126a:	1c c0       	rjmp	.+56     	; 0x12a4 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    126c:	a2 e3       	ldi	r26, 0x32	; 50
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e2 e3       	ldi	r30, 0x32	; 50
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	48 2f       	mov	r20, r24
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 2e       	mov	r0, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <DIO_u8SetPinValue+0x1f6>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	0a 94       	dec	r0
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <DIO_u8SetPinValue+0x1f2>
    128e:	84 2b       	or	r24, r20
    1290:	8c 93       	st	X, r24
    1292:	08 c0       	rjmp	.+16     	; 0x12a4 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=NOK; 			break;
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	89 83       	std	Y+1, r24	; 0x01
    1298:	05 c0       	rjmp	.+10     	; 0x12a4 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=NOK;
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12a6:	28 96       	adiw	r28, 0x08	; 8
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	08 95       	ret

000012b8 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	00 d0       	rcall	.+0      	; 0x12be <DIO_u8SetPortValue+0x6>
    12be:	00 d0       	rcall	.+0      	; 0x12c0 <DIO_u8SetPortValue+0x8>
    12c0:	0f 92       	push	r0
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	8a 83       	std	Y+2, r24	; 0x02
    12c8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState= OK;
    12ca:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	3d 83       	std	Y+5, r19	; 0x05
    12d4:	2c 83       	std	Y+4, r18	; 0x04
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	9d 81       	ldd	r25, Y+5	; 0x05
    12da:	81 30       	cpi	r24, 0x01	; 1
    12dc:	91 05       	cpc	r25, r1
    12de:	d1 f0       	breq	.+52     	; 0x1314 <DIO_u8SetPortValue+0x5c>
    12e0:	2c 81       	ldd	r18, Y+4	; 0x04
    12e2:	3d 81       	ldd	r19, Y+5	; 0x05
    12e4:	22 30       	cpi	r18, 0x02	; 2
    12e6:	31 05       	cpc	r19, r1
    12e8:	2c f4       	brge	.+10     	; 0x12f4 <DIO_u8SetPortValue+0x3c>
    12ea:	8c 81       	ldd	r24, Y+4	; 0x04
    12ec:	9d 81       	ldd	r25, Y+5	; 0x05
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	61 f0       	breq	.+24     	; 0x130a <DIO_u8SetPortValue+0x52>
    12f2:	1f c0       	rjmp	.+62     	; 0x1332 <DIO_u8SetPortValue+0x7a>
    12f4:	2c 81       	ldd	r18, Y+4	; 0x04
    12f6:	3d 81       	ldd	r19, Y+5	; 0x05
    12f8:	22 30       	cpi	r18, 0x02	; 2
    12fa:	31 05       	cpc	r19, r1
    12fc:	81 f0       	breq	.+32     	; 0x131e <DIO_u8SetPortValue+0x66>
    12fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1300:	9d 81       	ldd	r25, Y+5	; 0x05
    1302:	83 30       	cpi	r24, 0x03	; 3
    1304:	91 05       	cpc	r25, r1
    1306:	81 f0       	breq	.+32     	; 0x1328 <DIO_u8SetPortValue+0x70>
    1308:	14 c0       	rjmp	.+40     	; 0x1332 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA= Copy_u8Value; break;
    130a:	eb e3       	ldi	r30, 0x3B	; 59
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	80 83       	st	Z, r24
    1312:	11 c0       	rjmp	.+34     	; 0x1336 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB= Copy_u8Value; break;
    1314:	e8 e3       	ldi	r30, 0x38	; 56
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	80 83       	st	Z, r24
    131c:	0c c0       	rjmp	.+24     	; 0x1336 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC= Copy_u8Value; break;
    131e:	e5 e3       	ldi	r30, 0x35	; 53
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	80 83       	st	Z, r24
    1326:	07 c0       	rjmp	.+14     	; 0x1336 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD= Copy_u8Value; break;
    1328:	e2 e3       	ldi	r30, 0x32	; 50
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	80 83       	st	Z, r24
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=NOK; 	   break;
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1336:	89 81       	ldd	r24, Y+1	; 0x01
}
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	27 97       	sbiw	r28, 0x07	; 7
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	8a 83       	std	Y+2, r24	; 0x02
    135e:	6b 83       	std	Y+3, r22	; 0x03
    1360:	5d 83       	std	Y+5, r21	; 0x05
    1362:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState= OK;
    1364:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_pu8Value != NULL)  && (Copy_u8Pin<= DIO_u8PIN7))
    1366:	8c 81       	ldd	r24, Y+4	; 0x04
    1368:	9d 81       	ldd	r25, Y+5	; 0x05
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	09 f4       	brne	.+2      	; 0x1370 <DIO_u8GetPinValue+0x28>
    136e:	78 c0       	rjmp	.+240    	; 0x1460 <DIO_u8GetPinValue+0x118>
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	88 30       	cpi	r24, 0x08	; 8
    1374:	08 f0       	brcs	.+2      	; 0x1378 <DIO_u8GetPinValue+0x30>
    1376:	74 c0       	rjmp	.+232    	; 0x1460 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	3f 83       	std	Y+7, r19	; 0x07
    1380:	2e 83       	std	Y+6, r18	; 0x06
    1382:	4e 81       	ldd	r20, Y+6	; 0x06
    1384:	5f 81       	ldd	r21, Y+7	; 0x07
    1386:	41 30       	cpi	r20, 0x01	; 1
    1388:	51 05       	cpc	r21, r1
    138a:	59 f1       	breq	.+86     	; 0x13e2 <DIO_u8GetPinValue+0x9a>
    138c:	8e 81       	ldd	r24, Y+6	; 0x06
    138e:	9f 81       	ldd	r25, Y+7	; 0x07
    1390:	82 30       	cpi	r24, 0x02	; 2
    1392:	91 05       	cpc	r25, r1
    1394:	34 f4       	brge	.+12     	; 0x13a2 <DIO_u8GetPinValue+0x5a>
    1396:	2e 81       	ldd	r18, Y+6	; 0x06
    1398:	3f 81       	ldd	r19, Y+7	; 0x07
    139a:	21 15       	cp	r18, r1
    139c:	31 05       	cpc	r19, r1
    139e:	69 f0       	breq	.+26     	; 0x13ba <DIO_u8GetPinValue+0x72>
    13a0:	5c c0       	rjmp	.+184    	; 0x145a <DIO_u8GetPinValue+0x112>
    13a2:	4e 81       	ldd	r20, Y+6	; 0x06
    13a4:	5f 81       	ldd	r21, Y+7	; 0x07
    13a6:	42 30       	cpi	r20, 0x02	; 2
    13a8:	51 05       	cpc	r21, r1
    13aa:	79 f1       	breq	.+94     	; 0x140a <DIO_u8GetPinValue+0xc2>
    13ac:	8e 81       	ldd	r24, Y+6	; 0x06
    13ae:	9f 81       	ldd	r25, Y+7	; 0x07
    13b0:	83 30       	cpi	r24, 0x03	; 3
    13b2:	91 05       	cpc	r25, r1
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <DIO_u8GetPinValue+0x70>
    13b6:	3d c0       	rjmp	.+122    	; 0x1432 <DIO_u8GetPinValue+0xea>
    13b8:	50 c0       	rjmp	.+160    	; 0x145a <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA: *Copy_pu8Value= GET_BIT(PINA,Copy_u8Pin); break;
    13ba:	e9 e3       	ldi	r30, 0x39	; 57
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	88 2f       	mov	r24, r24
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	a9 01       	movw	r20, r18
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <DIO_u8GetPinValue+0x8a>
    13ce:	55 95       	asr	r21
    13d0:	47 95       	ror	r20
    13d2:	8a 95       	dec	r24
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <DIO_u8GetPinValue+0x86>
    13d6:	ca 01       	movw	r24, r20
    13d8:	81 70       	andi	r24, 0x01	; 1
    13da:	ec 81       	ldd	r30, Y+4	; 0x04
    13dc:	fd 81       	ldd	r31, Y+5	; 0x05
    13de:	80 83       	st	Z, r24
    13e0:	41 c0       	rjmp	.+130    	; 0x1464 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB: *Copy_pu8Value= GET_BIT(PINB,Copy_u8Pin); break;
    13e2:	e6 e3       	ldi	r30, 0x36	; 54
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	88 2f       	mov	r24, r24
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	a9 01       	movw	r20, r18
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <DIO_u8GetPinValue+0xb2>
    13f6:	55 95       	asr	r21
    13f8:	47 95       	ror	r20
    13fa:	8a 95       	dec	r24
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <DIO_u8GetPinValue+0xae>
    13fe:	ca 01       	movw	r24, r20
    1400:	81 70       	andi	r24, 0x01	; 1
    1402:	ec 81       	ldd	r30, Y+4	; 0x04
    1404:	fd 81       	ldd	r31, Y+5	; 0x05
    1406:	80 83       	st	Z, r24
    1408:	2d c0       	rjmp	.+90     	; 0x1464 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC: *Copy_pu8Value= GET_BIT(PINC,Copy_u8Pin); break;
    140a:	e3 e3       	ldi	r30, 0x33	; 51
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	88 2f       	mov	r24, r24
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	a9 01       	movw	r20, r18
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <DIO_u8GetPinValue+0xda>
    141e:	55 95       	asr	r21
    1420:	47 95       	ror	r20
    1422:	8a 95       	dec	r24
    1424:	e2 f7       	brpl	.-8      	; 0x141e <DIO_u8GetPinValue+0xd6>
    1426:	ca 01       	movw	r24, r20
    1428:	81 70       	andi	r24, 0x01	; 1
    142a:	ec 81       	ldd	r30, Y+4	; 0x04
    142c:	fd 81       	ldd	r31, Y+5	; 0x05
    142e:	80 83       	st	Z, r24
    1430:	19 c0       	rjmp	.+50     	; 0x1464 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD: *Copy_pu8Value= GET_BIT(PIND,Copy_u8Pin); break;
    1432:	e0 e3       	ldi	r30, 0x30	; 48
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	88 2f       	mov	r24, r24
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	a9 01       	movw	r20, r18
    1444:	02 c0       	rjmp	.+4      	; 0x144a <DIO_u8GetPinValue+0x102>
    1446:	55 95       	asr	r21
    1448:	47 95       	ror	r20
    144a:	8a 95       	dec	r24
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <DIO_u8GetPinValue+0xfe>
    144e:	ca 01       	movw	r24, r20
    1450:	81 70       	andi	r24, 0x01	; 1
    1452:	ec 81       	ldd	r30, Y+4	; 0x04
    1454:	fd 81       	ldd	r31, Y+5	; 0x05
    1456:	80 83       	st	Z, r24
    1458:	05 c0       	rjmp	.+10     	; 0x1464 <DIO_u8GetPinValue+0x11c>
		default: Local_u8ErrorState=NOK; 							break;
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	89 83       	std	Y+1, r24	; 0x01
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1464:	89 81       	ldd	r24, Y+1	; 0x01
}
    1466:	27 96       	adiw	r28, 0x07	; 7
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <PORT_voidInit>:

void PORT_voidInit(void)
{
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
	DDRA= PORTA_DIR;
    1480:	ea e3       	ldi	r30, 0x3A	; 58
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	10 82       	st	Z, r1
	DDRB= PORTB_DIR;
    1486:	e7 e3       	ldi	r30, 0x37	; 55
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	8f e7       	ldi	r24, 0x7F	; 127
    148c:	80 83       	st	Z, r24
	DDRC= PORTC_DIR;
    148e:	e4 e3       	ldi	r30, 0x34	; 52
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	10 82       	st	Z, r1
	DDRD= PORTD_DIR;
    1494:	e1 e3       	ldi	r30, 0x31	; 49
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	82 e8       	ldi	r24, 0x82	; 130
    149a:	80 83       	st	Z, r24

	PORTA=PORTA_INITIAL_VALUE;
    149c:	eb e3       	ldi	r30, 0x3B	; 59
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	10 82       	st	Z, r1
	PORTB=PORTB_INITIAL_VALUE;
    14a2:	e8 e3       	ldi	r30, 0x38	; 56
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	10 82       	st	Z, r1
	PORTC=PORTC_INITIAL_VALUE;
    14a8:	e5 e3       	ldi	r30, 0x35	; 53
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	10 82       	st	Z, r1
	PORTD=PORTD_INITIAL_VALUE;
    14ae:	e2 e3       	ldi	r30, 0x32	; 50
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	10 82       	st	Z, r1
}
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <DCMTR_voidRotateCCW>:

#include "DCMTR_config.h"
#include "DCMTR_interface.h"

void DCMTR_voidRotateCCW(u8 Copy_u8Pin1,u8 Copy_u8Pin2)
{
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <DCMTR_voidRotateCCW+0x6>
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    14c4:	89 83       	std	Y+1, r24	; 0x01
    14c6:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8SetPinValue(DCMTR_PORT,Copy_u8Pin1,DIO_u8PIN_LOW);
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	69 81       	ldd	r22, Y+1	; 0x01
    14cc:	40 e0       	ldi	r20, 0x00	; 0
    14ce:	0e 94 4a 08 	call	0x1094	; 0x1094 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DCMTR_PORT,Copy_u8Pin2,DIO_u8PIN_HIGH);
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	6a 81       	ldd	r22, Y+2	; 0x02
    14d6:	41 e0       	ldi	r20, 0x01	; 1
    14d8:	0e 94 4a 08 	call	0x1094	; 0x1094 <DIO_u8SetPinValue>
}
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	08 95       	ret

000014e6 <DCMTR_voidRotateCW>:

void DCMTR_voidRotateCW(u8 Copy_u8Pin1,u8 Copy_u8Pin2)
{
    14e6:	df 93       	push	r29
    14e8:	cf 93       	push	r28
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <DCMTR_voidRotateCW+0x6>
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	89 83       	std	Y+1, r24	; 0x01
    14f2:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8SetPinValue(DCMTR_PORT,Copy_u8Pin2,DIO_u8PIN_LOW);
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	6a 81       	ldd	r22, Y+2	; 0x02
    14f8:	40 e0       	ldi	r20, 0x00	; 0
    14fa:	0e 94 4a 08 	call	0x1094	; 0x1094 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DCMTR_PORT,Copy_u8Pin1,DIO_u8PIN_HIGH);
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	69 81       	ldd	r22, Y+1	; 0x01
    1502:	41 e0       	ldi	r20, 0x01	; 1
    1504:	0e 94 4a 08 	call	0x1094	; 0x1094 <DIO_u8SetPinValue>
}
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <DCMTR_voidStop>:

void DCMTR_voidStop(u8 Copy_u8Pin1,u8 Copy_u8Pin2)
{
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	00 d0       	rcall	.+0      	; 0x1518 <DCMTR_voidStop+0x6>
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	89 83       	std	Y+1, r24	; 0x01
    151e:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8SetPinValue(DCMTR_PORT,Copy_u8Pin2,DIO_u8PIN_LOW);
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	6a 81       	ldd	r22, Y+2	; 0x02
    1524:	40 e0       	ldi	r20, 0x00	; 0
    1526:	0e 94 4a 08 	call	0x1094	; 0x1094 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DCMTR_PORT,Copy_u8Pin1,DIO_u8PIN_LOW);
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	69 81       	ldd	r22, Y+1	; 0x01
    152e:	40 e0       	ldi	r20, 0x00	; 0
    1530:	0e 94 4a 08 	call	0x1094	; 0x1094 <DIO_u8SetPinValue>
}
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <Username>:

u8 Password_valid_login_flag = 0;	//used to indicate if password is valid
u8 Password_trials = 3;

void Username(void)
{
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	ad 97       	sbiw	r28, 0x2d	; 45
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	cd bf       	out	0x3d, r28	; 61
    1552:	a8 c1       	rjmp	.+848    	; 0x18a4 <Username+0x366>
	while(Username_trials > 0 && Username_valid_login_flag == 0)
	{
		USART_SendString("Enter Username: ");
    1554:	80 e6       	ldi	r24, 0x60	; 96
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	0e 94 51 06 	call	0xca2	; 0xca2 <USART_SendString>
		USART_u8ReceiveBufferSynch(Input_Username, 5);	//receive the username
    155c:	8f ec       	ldi	r24, 0xCF	; 207
    155e:	93 e0       	ldi	r25, 0x03	; 3
    1560:	65 e0       	ldi	r22, 0x05	; 5
    1562:	0e 94 ad 06 	call	0xd5a	; 0xd5a <USART_u8ReceiveBufferSynch>

		u8 Local_u8Iterator;
		u8 Local_u8Iterator2;
		u8 Counter = 0;
    1566:	1b a6       	std	Y+43, r1	; 0x2b
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	a8 e4       	ldi	r26, 0x48	; 72
    156e:	b3 e4       	ldi	r27, 0x43	; 67
    1570:	8f a3       	std	Y+39, r24	; 0x27
    1572:	98 a7       	std	Y+40, r25	; 0x28
    1574:	a9 a7       	std	Y+41, r26	; 0x29
    1576:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1578:	6f a1       	ldd	r22, Y+39	; 0x27
    157a:	78 a5       	ldd	r23, Y+40	; 0x28
    157c:	89 a5       	ldd	r24, Y+41	; 0x29
    157e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e4       	ldi	r19, 0x40	; 64
    1584:	4c e1       	ldi	r20, 0x1C	; 28
    1586:	55 e4       	ldi	r21, 0x45	; 69
    1588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	8b a3       	std	Y+35, r24	; 0x23
    1592:	9c a3       	std	Y+36, r25	; 0x24
    1594:	ad a3       	std	Y+37, r26	; 0x25
    1596:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1598:	6b a1       	ldd	r22, Y+35	; 0x23
    159a:	7c a1       	ldd	r23, Y+36	; 0x24
    159c:	8d a1       	ldd	r24, Y+37	; 0x25
    159e:	9e a1       	ldd	r25, Y+38	; 0x26
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	40 e8       	ldi	r20, 0x80	; 128
    15a6:	5f e3       	ldi	r21, 0x3F	; 63
    15a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15ac:	88 23       	and	r24, r24
    15ae:	2c f4       	brge	.+10     	; 0x15ba <Username+0x7c>
		__ticks = 1;
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	9a a3       	std	Y+34, r25	; 0x22
    15b6:	89 a3       	std	Y+33, r24	; 0x21
    15b8:	3f c0       	rjmp	.+126    	; 0x1638 <Username+0xfa>
	else if (__tmp > 65535)
    15ba:	6b a1       	ldd	r22, Y+35	; 0x23
    15bc:	7c a1       	ldd	r23, Y+36	; 0x24
    15be:	8d a1       	ldd	r24, Y+37	; 0x25
    15c0:	9e a1       	ldd	r25, Y+38	; 0x26
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	3f ef       	ldi	r19, 0xFF	; 255
    15c6:	4f e7       	ldi	r20, 0x7F	; 127
    15c8:	57 e4       	ldi	r21, 0x47	; 71
    15ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ce:	18 16       	cp	r1, r24
    15d0:	4c f5       	brge	.+82     	; 0x1624 <Username+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d2:	6f a1       	ldd	r22, Y+39	; 0x27
    15d4:	78 a5       	ldd	r23, Y+40	; 0x28
    15d6:	89 a5       	ldd	r24, Y+41	; 0x29
    15d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	40 e2       	ldi	r20, 0x20	; 32
    15e0:	51 e4       	ldi	r21, 0x41	; 65
    15e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e6:	dc 01       	movw	r26, r24
    15e8:	cb 01       	movw	r24, r22
    15ea:	bc 01       	movw	r22, r24
    15ec:	cd 01       	movw	r24, r26
    15ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	9a a3       	std	Y+34, r25	; 0x22
    15f8:	89 a3       	std	Y+33, r24	; 0x21
    15fa:	0f c0       	rjmp	.+30     	; 0x161a <Username+0xdc>
    15fc:	8a ef       	ldi	r24, 0xFA	; 250
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	98 a3       	std	Y+32, r25	; 0x20
    1602:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1604:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1606:	98 a1       	ldd	r25, Y+32	; 0x20
    1608:	01 97       	sbiw	r24, 0x01	; 1
    160a:	f1 f7       	brne	.-4      	; 0x1608 <Username+0xca>
    160c:	98 a3       	std	Y+32, r25	; 0x20
    160e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1610:	89 a1       	ldd	r24, Y+33	; 0x21
    1612:	9a a1       	ldd	r25, Y+34	; 0x22
    1614:	01 97       	sbiw	r24, 0x01	; 1
    1616:	9a a3       	std	Y+34, r25	; 0x22
    1618:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161a:	89 a1       	ldd	r24, Y+33	; 0x21
    161c:	9a a1       	ldd	r25, Y+34	; 0x22
    161e:	00 97       	sbiw	r24, 0x00	; 0
    1620:	69 f7       	brne	.-38     	; 0x15fc <Username+0xbe>
    1622:	14 c0       	rjmp	.+40     	; 0x164c <Username+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1624:	6b a1       	ldd	r22, Y+35	; 0x23
    1626:	7c a1       	ldd	r23, Y+36	; 0x24
    1628:	8d a1       	ldd	r24, Y+37	; 0x25
    162a:	9e a1       	ldd	r25, Y+38	; 0x26
    162c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	9a a3       	std	Y+34, r25	; 0x22
    1636:	89 a3       	std	Y+33, r24	; 0x21
    1638:	89 a1       	ldd	r24, Y+33	; 0x21
    163a:	9a a1       	ldd	r25, Y+34	; 0x22
    163c:	9e 8f       	std	Y+30, r25	; 0x1e
    163e:	8d 8f       	std	Y+29, r24	; 0x1d
    1640:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1642:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1644:	01 97       	sbiw	r24, 0x01	; 1
    1646:	f1 f7       	brne	.-4      	; 0x1644 <Username+0x106>
    1648:	9e 8f       	std	Y+30, r25	; 0x1e
    164a:	8d 8f       	std	Y+29, r24	; 0x1d

		_delay_ms(200);

		//Checking if username is valid
		for(Local_u8Iterator = 0; Local_u8Iterator < 10; Local_u8Iterator++)
    164c:	1d a6       	std	Y+45, r1	; 0x2d
    164e:	32 c0       	rjmp	.+100    	; 0x16b4 <Username+0x176>
		{
			for(Local_u8Iterator2 = 0; Local_u8Iterator2 < 5; Local_u8Iterator2++)
    1650:	1c a6       	std	Y+44, r1	; 0x2c
    1652:	22 c0       	rjmp	.+68     	; 0x1698 <Username+0x15a>
			{
				if(Input_Username[Local_u8Iterator2] == Usernames[Local_u8Iterator][Local_u8Iterator2])
    1654:	8c a5       	ldd	r24, Y+44	; 0x2c
    1656:	88 2f       	mov	r24, r24
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	fc 01       	movw	r30, r24
    165c:	e1 53       	subi	r30, 0x31	; 49
    165e:	fc 4f       	sbci	r31, 0xFC	; 252
    1660:	60 81       	ld	r22, Z
    1662:	8d a5       	ldd	r24, Y+45	; 0x2d
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	8c a5       	ldd	r24, Y+44	; 0x2c
    166a:	48 2f       	mov	r20, r24
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	c9 01       	movw	r24, r18
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	88 0f       	add	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	82 0f       	add	r24, r18
    167a:	93 1f       	adc	r25, r19
    167c:	84 0f       	add	r24, r20
    167e:	95 1f       	adc	r25, r21
    1680:	fc 01       	movw	r30, r24
    1682:	e2 59       	subi	r30, 0x92	; 146
    1684:	fc 4f       	sbci	r31, 0xFC	; 252
    1686:	80 81       	ld	r24, Z
    1688:	68 17       	cp	r22, r24
    168a:	19 f4       	brne	.+6      	; 0x1692 <Username+0x154>
				{
					Counter++;
    168c:	8b a5       	ldd	r24, Y+43	; 0x2b
    168e:	8f 5f       	subi	r24, 0xFF	; 255
    1690:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(200);

		//Checking if username is valid
		for(Local_u8Iterator = 0; Local_u8Iterator < 10; Local_u8Iterator++)
		{
			for(Local_u8Iterator2 = 0; Local_u8Iterator2 < 5; Local_u8Iterator2++)
    1692:	8c a5       	ldd	r24, Y+44	; 0x2c
    1694:	8f 5f       	subi	r24, 0xFF	; 255
    1696:	8c a7       	std	Y+44, r24	; 0x2c
    1698:	8c a5       	ldd	r24, Y+44	; 0x2c
    169a:	85 30       	cpi	r24, 0x05	; 5
    169c:	d8 f2       	brcs	.-74     	; 0x1654 <Username+0x116>
				{
					Counter++;
				}
			}

			if(Counter==5)	//username is correct
    169e:	8b a5       	ldd	r24, Y+43	; 0x2b
    16a0:	85 30       	cpi	r24, 0x05	; 5
    16a2:	21 f4       	brne	.+8      	; 0x16ac <Username+0x16e>
			{
				Username_Password_Index = Local_u8Iterator;
    16a4:	8d a5       	ldd	r24, Y+45	; 0x2d
    16a6:	80 93 d8 03 	sts	0x03D8, r24
    16aa:	07 c0       	rjmp	.+14     	; 0x16ba <Username+0x17c>
				break;
			}
			else
			{
				Counter = 0;
    16ac:	1b a6       	std	Y+43, r1	; 0x2b
		u8 Counter = 0;

		_delay_ms(200);

		//Checking if username is valid
		for(Local_u8Iterator = 0; Local_u8Iterator < 10; Local_u8Iterator++)
    16ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    16b0:	8f 5f       	subi	r24, 0xFF	; 255
    16b2:	8d a7       	std	Y+45, r24	; 0x2d
    16b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    16b6:	8a 30       	cpi	r24, 0x0A	; 10
    16b8:	58 f2       	brcs	.-106    	; 0x1650 <Username+0x112>
			{
				Counter = 0;
			}
		}

		if(Counter==5)	//username is correct
    16ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    16bc:	85 30       	cpi	r24, 0x05	; 5
    16be:	09 f0       	breq	.+2      	; 0x16c2 <Username+0x184>
    16c0:	76 c0       	rjmp	.+236    	; 0x17ae <Username+0x270>
		{
			Username_valid_login_flag = 1;
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	80 93 cd 03 	sts	0x03CD, r24
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	aa e7       	ldi	r26, 0x7A	; 122
    16ce:	b4 e4       	ldi	r27, 0x44	; 68
    16d0:	89 8f       	std	Y+25, r24	; 0x19
    16d2:	9a 8f       	std	Y+26, r25	; 0x1a
    16d4:	ab 8f       	std	Y+27, r26	; 0x1b
    16d6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d8:	69 8d       	ldd	r22, Y+25	; 0x19
    16da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e4       	ldi	r19, 0x40	; 64
    16e4:	4c e1       	ldi	r20, 0x1C	; 28
    16e6:	55 e4       	ldi	r21, 0x45	; 69
    16e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	8d 8b       	std	Y+21, r24	; 0x15
    16f2:	9e 8b       	std	Y+22, r25	; 0x16
    16f4:	af 8b       	std	Y+23, r26	; 0x17
    16f6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16f8:	6d 89       	ldd	r22, Y+21	; 0x15
    16fa:	7e 89       	ldd	r23, Y+22	; 0x16
    16fc:	8f 89       	ldd	r24, Y+23	; 0x17
    16fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	40 e8       	ldi	r20, 0x80	; 128
    1706:	5f e3       	ldi	r21, 0x3F	; 63
    1708:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    170c:	88 23       	and	r24, r24
    170e:	2c f4       	brge	.+10     	; 0x171a <Username+0x1dc>
		__ticks = 1;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	9c 8b       	std	Y+20, r25	; 0x14
    1716:	8b 8b       	std	Y+19, r24	; 0x13
    1718:	3f c0       	rjmp	.+126    	; 0x1798 <Username+0x25a>
	else if (__tmp > 65535)
    171a:	6d 89       	ldd	r22, Y+21	; 0x15
    171c:	7e 89       	ldd	r23, Y+22	; 0x16
    171e:	8f 89       	ldd	r24, Y+23	; 0x17
    1720:	98 8d       	ldd	r25, Y+24	; 0x18
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	3f ef       	ldi	r19, 0xFF	; 255
    1726:	4f e7       	ldi	r20, 0x7F	; 127
    1728:	57 e4       	ldi	r21, 0x47	; 71
    172a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    172e:	18 16       	cp	r1, r24
    1730:	4c f5       	brge	.+82     	; 0x1784 <Username+0x246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1732:	69 8d       	ldd	r22, Y+25	; 0x19
    1734:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1736:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1738:	9c 8d       	ldd	r25, Y+28	; 0x1c
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e2       	ldi	r20, 0x20	; 32
    1740:	51 e4       	ldi	r21, 0x41	; 65
    1742:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	bc 01       	movw	r22, r24
    174c:	cd 01       	movw	r24, r26
    174e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	9c 8b       	std	Y+20, r25	; 0x14
    1758:	8b 8b       	std	Y+19, r24	; 0x13
    175a:	0f c0       	rjmp	.+30     	; 0x177a <Username+0x23c>
    175c:	8a ef       	ldi	r24, 0xFA	; 250
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	9a 8b       	std	Y+18, r25	; 0x12
    1762:	89 8b       	std	Y+17, r24	; 0x11
    1764:	89 89       	ldd	r24, Y+17	; 0x11
    1766:	9a 89       	ldd	r25, Y+18	; 0x12
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	f1 f7       	brne	.-4      	; 0x1768 <Username+0x22a>
    176c:	9a 8b       	std	Y+18, r25	; 0x12
    176e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1770:	8b 89       	ldd	r24, Y+19	; 0x13
    1772:	9c 89       	ldd	r25, Y+20	; 0x14
    1774:	01 97       	sbiw	r24, 0x01	; 1
    1776:	9c 8b       	std	Y+20, r25	; 0x14
    1778:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    177a:	8b 89       	ldd	r24, Y+19	; 0x13
    177c:	9c 89       	ldd	r25, Y+20	; 0x14
    177e:	00 97       	sbiw	r24, 0x00	; 0
    1780:	69 f7       	brne	.-38     	; 0x175c <Username+0x21e>
    1782:	90 c0       	rjmp	.+288    	; 0x18a4 <Username+0x366>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1784:	6d 89       	ldd	r22, Y+21	; 0x15
    1786:	7e 89       	ldd	r23, Y+22	; 0x16
    1788:	8f 89       	ldd	r24, Y+23	; 0x17
    178a:	98 8d       	ldd	r25, Y+24	; 0x18
    178c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	9c 8b       	std	Y+20, r25	; 0x14
    1796:	8b 8b       	std	Y+19, r24	; 0x13
    1798:	8b 89       	ldd	r24, Y+19	; 0x13
    179a:	9c 89       	ldd	r25, Y+20	; 0x14
    179c:	98 8b       	std	Y+16, r25	; 0x10
    179e:	8f 87       	std	Y+15, r24	; 0x0f
    17a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    17a2:	98 89       	ldd	r25, Y+16	; 0x10
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	f1 f7       	brne	.-4      	; 0x17a4 <Username+0x266>
    17a8:	98 8b       	std	Y+16, r25	; 0x10
    17aa:	8f 87       	std	Y+15, r24	; 0x0f
    17ac:	7b c0       	rjmp	.+246    	; 0x18a4 <Username+0x366>
		    _delay_ms(1000);
		}
		else
		{
			Username_trials--;	//wrong username -1 trial
    17ae:	80 91 c9 03 	lds	r24, 0x03C9
    17b2:	81 50       	subi	r24, 0x01	; 1
    17b4:	80 93 c9 03 	sts	0x03C9, r24
			USART_SendString("Invalid Username \n");
    17b8:	81 e7       	ldi	r24, 0x71	; 113
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	0e 94 51 06 	call	0xca2	; 0xca2 <USART_SendString>
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	a6 e9       	ldi	r26, 0x96	; 150
    17c6:	b3 e4       	ldi	r27, 0x43	; 67
    17c8:	8b 87       	std	Y+11, r24	; 0x0b
    17ca:	9c 87       	std	Y+12, r25	; 0x0c
    17cc:	ad 87       	std	Y+13, r26	; 0x0d
    17ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e4       	ldi	r19, 0x40	; 64
    17dc:	4c e1       	ldi	r20, 0x1C	; 28
    17de:	55 e4       	ldi	r21, 0x45	; 69
    17e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	8f 83       	std	Y+7, r24	; 0x07
    17ea:	98 87       	std	Y+8, r25	; 0x08
    17ec:	a9 87       	std	Y+9, r26	; 0x09
    17ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17f0:	6f 81       	ldd	r22, Y+7	; 0x07
    17f2:	78 85       	ldd	r23, Y+8	; 0x08
    17f4:	89 85       	ldd	r24, Y+9	; 0x09
    17f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	40 e8       	ldi	r20, 0x80	; 128
    17fe:	5f e3       	ldi	r21, 0x3F	; 63
    1800:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1804:	88 23       	and	r24, r24
    1806:	2c f4       	brge	.+10     	; 0x1812 <Username+0x2d4>
		__ticks = 1;
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	9e 83       	std	Y+6, r25	; 0x06
    180e:	8d 83       	std	Y+5, r24	; 0x05
    1810:	3f c0       	rjmp	.+126    	; 0x1890 <Username+0x352>
	else if (__tmp > 65535)
    1812:	6f 81       	ldd	r22, Y+7	; 0x07
    1814:	78 85       	ldd	r23, Y+8	; 0x08
    1816:	89 85       	ldd	r24, Y+9	; 0x09
    1818:	9a 85       	ldd	r25, Y+10	; 0x0a
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	3f ef       	ldi	r19, 0xFF	; 255
    181e:	4f e7       	ldi	r20, 0x7F	; 127
    1820:	57 e4       	ldi	r21, 0x47	; 71
    1822:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1826:	18 16       	cp	r1, r24
    1828:	4c f5       	brge	.+82     	; 0x187c <Username+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    182a:	6b 85       	ldd	r22, Y+11	; 0x0b
    182c:	7c 85       	ldd	r23, Y+12	; 0x0c
    182e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1830:	9e 85       	ldd	r25, Y+14	; 0x0e
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	40 e2       	ldi	r20, 0x20	; 32
    1838:	51 e4       	ldi	r21, 0x41	; 65
    183a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	bc 01       	movw	r22, r24
    1844:	cd 01       	movw	r24, r26
    1846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	9e 83       	std	Y+6, r25	; 0x06
    1850:	8d 83       	std	Y+5, r24	; 0x05
    1852:	0f c0       	rjmp	.+30     	; 0x1872 <Username+0x334>
    1854:	8a ef       	ldi	r24, 0xFA	; 250
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	9c 83       	std	Y+4, r25	; 0x04
    185a:	8b 83       	std	Y+3, r24	; 0x03
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	9c 81       	ldd	r25, Y+4	; 0x04
    1860:	01 97       	sbiw	r24, 0x01	; 1
    1862:	f1 f7       	brne	.-4      	; 0x1860 <Username+0x322>
    1864:	9c 83       	std	Y+4, r25	; 0x04
    1866:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1868:	8d 81       	ldd	r24, Y+5	; 0x05
    186a:	9e 81       	ldd	r25, Y+6	; 0x06
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	9e 83       	std	Y+6, r25	; 0x06
    1870:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1872:	8d 81       	ldd	r24, Y+5	; 0x05
    1874:	9e 81       	ldd	r25, Y+6	; 0x06
    1876:	00 97       	sbiw	r24, 0x00	; 0
    1878:	69 f7       	brne	.-38     	; 0x1854 <Username+0x316>
    187a:	14 c0       	rjmp	.+40     	; 0x18a4 <Username+0x366>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    187c:	6f 81       	ldd	r22, Y+7	; 0x07
    187e:	78 85       	ldd	r23, Y+8	; 0x08
    1880:	89 85       	ldd	r24, Y+9	; 0x09
    1882:	9a 85       	ldd	r25, Y+10	; 0x0a
    1884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	9e 83       	std	Y+6, r25	; 0x06
    188e:	8d 83       	std	Y+5, r24	; 0x05
    1890:	8d 81       	ldd	r24, Y+5	; 0x05
    1892:	9e 81       	ldd	r25, Y+6	; 0x06
    1894:	9a 83       	std	Y+2, r25	; 0x02
    1896:	89 83       	std	Y+1, r24	; 0x01
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	9a 81       	ldd	r25, Y+2	; 0x02
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	f1 f7       	brne	.-4      	; 0x189c <Username+0x35e>
    18a0:	9a 83       	std	Y+2, r25	; 0x02
    18a2:	89 83       	std	Y+1, r24	; 0x01
u8 Password_valid_login_flag = 0;	//used to indicate if password is valid
u8 Password_trials = 3;

void Username(void)
{
	while(Username_trials > 0 && Username_valid_login_flag == 0)
    18a4:	80 91 c9 03 	lds	r24, 0x03C9
    18a8:	88 23       	and	r24, r24
    18aa:	29 f0       	breq	.+10     	; 0x18b6 <Username+0x378>
    18ac:	80 91 cd 03 	lds	r24, 0x03CD
    18b0:	88 23       	and	r24, r24
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <Username+0x378>
    18b4:	4f ce       	rjmp	.-866    	; 0x1554 <Username+0x16>
			USART_SendString("Invalid Username \n");
		    _delay_ms(300);
		}

	}
	if(Username_trials == 0 && Username_valid_login_flag==0)	//out of trials
    18b6:	80 91 c9 03 	lds	r24, 0x03C9
    18ba:	88 23       	and	r24, r24
    18bc:	49 f4       	brne	.+18     	; 0x18d0 <Username+0x392>
    18be:	80 91 cd 03 	lds	r24, 0x03CD
    18c2:	88 23       	and	r24, r24
    18c4:	29 f4       	brne	.+10     	; 0x18d0 <Username+0x392>
	{
		USART_SendString("Invalid Username");
    18c6:	84 e8       	ldi	r24, 0x84	; 132
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	0e 94 51 06 	call	0xca2	; 0xca2 <USART_SendString>
    18ce:	ff cf       	rjmp	.-2      	; 0x18ce <Username+0x390>
	    while(1);
	}
}
    18d0:	ad 96       	adiw	r28, 0x2d	; 45
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	f8 94       	cli
    18d6:	de bf       	out	0x3e, r29	; 62
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	cd bf       	out	0x3d, r28	; 61
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <Password>:

void Password(void)
{
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
    18ea:	ac 97       	sbiw	r28, 0x2c	; 44
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	f8 94       	cli
    18f0:	de bf       	out	0x3e, r29	; 62
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	cd bf       	out	0x3d, r28	; 61
    18f6:	a5 c1       	rjmp	.+842    	; 0x1c42 <Password+0x360>

	while(Password_trials > 0 && Password_valid_login_flag == 0)
	{
		USART_SendString("Enter Password: ");
    18f8:	85 e9       	ldi	r24, 0x95	; 149
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	0e 94 51 06 	call	0xca2	; 0xca2 <USART_SendString>
		USART_u8ReceiveBufferSynch(Input_Password, 4);	//receive the password
    1900:	84 ed       	ldi	r24, 0xD4	; 212
    1902:	93 e0       	ldi	r25, 0x03	; 3
    1904:	64 e0       	ldi	r22, 0x04	; 4
    1906:	0e 94 ad 06 	call	0xd5a	; 0xd5a <USART_u8ReceiveBufferSynch>
		u8 i;	//Local iterator
		u8 Counter = 0;
    190a:	1b a6       	std	Y+43, r1	; 0x2b
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	a8 e4       	ldi	r26, 0x48	; 72
    1912:	b3 e4       	ldi	r27, 0x43	; 67
    1914:	8f a3       	std	Y+39, r24	; 0x27
    1916:	98 a7       	std	Y+40, r25	; 0x28
    1918:	a9 a7       	std	Y+41, r26	; 0x29
    191a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    191c:	6f a1       	ldd	r22, Y+39	; 0x27
    191e:	78 a5       	ldd	r23, Y+40	; 0x28
    1920:	89 a5       	ldd	r24, Y+41	; 0x29
    1922:	9a a5       	ldd	r25, Y+42	; 0x2a
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e4       	ldi	r19, 0x40	; 64
    1928:	4c e1       	ldi	r20, 0x1C	; 28
    192a:	55 e4       	ldi	r21, 0x45	; 69
    192c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	8b a3       	std	Y+35, r24	; 0x23
    1936:	9c a3       	std	Y+36, r25	; 0x24
    1938:	ad a3       	std	Y+37, r26	; 0x25
    193a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    193c:	6b a1       	ldd	r22, Y+35	; 0x23
    193e:	7c a1       	ldd	r23, Y+36	; 0x24
    1940:	8d a1       	ldd	r24, Y+37	; 0x25
    1942:	9e a1       	ldd	r25, Y+38	; 0x26
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	40 e8       	ldi	r20, 0x80	; 128
    194a:	5f e3       	ldi	r21, 0x3F	; 63
    194c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1950:	88 23       	and	r24, r24
    1952:	2c f4       	brge	.+10     	; 0x195e <Password+0x7c>
		__ticks = 1;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	9a a3       	std	Y+34, r25	; 0x22
    195a:	89 a3       	std	Y+33, r24	; 0x21
    195c:	3f c0       	rjmp	.+126    	; 0x19dc <Password+0xfa>
	else if (__tmp > 65535)
    195e:	6b a1       	ldd	r22, Y+35	; 0x23
    1960:	7c a1       	ldd	r23, Y+36	; 0x24
    1962:	8d a1       	ldd	r24, Y+37	; 0x25
    1964:	9e a1       	ldd	r25, Y+38	; 0x26
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	3f ef       	ldi	r19, 0xFF	; 255
    196a:	4f e7       	ldi	r20, 0x7F	; 127
    196c:	57 e4       	ldi	r21, 0x47	; 71
    196e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1972:	18 16       	cp	r1, r24
    1974:	4c f5       	brge	.+82     	; 0x19c8 <Password+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1976:	6f a1       	ldd	r22, Y+39	; 0x27
    1978:	78 a5       	ldd	r23, Y+40	; 0x28
    197a:	89 a5       	ldd	r24, Y+41	; 0x29
    197c:	9a a5       	ldd	r25, Y+42	; 0x2a
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	40 e2       	ldi	r20, 0x20	; 32
    1984:	51 e4       	ldi	r21, 0x41	; 65
    1986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	bc 01       	movw	r22, r24
    1990:	cd 01       	movw	r24, r26
    1992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	9a a3       	std	Y+34, r25	; 0x22
    199c:	89 a3       	std	Y+33, r24	; 0x21
    199e:	0f c0       	rjmp	.+30     	; 0x19be <Password+0xdc>
    19a0:	8a ef       	ldi	r24, 0xFA	; 250
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	98 a3       	std	Y+32, r25	; 0x20
    19a6:	8f 8f       	std	Y+31, r24	; 0x1f
    19a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19aa:	98 a1       	ldd	r25, Y+32	; 0x20
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <Password+0xca>
    19b0:	98 a3       	std	Y+32, r25	; 0x20
    19b2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b4:	89 a1       	ldd	r24, Y+33	; 0x21
    19b6:	9a a1       	ldd	r25, Y+34	; 0x22
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	9a a3       	std	Y+34, r25	; 0x22
    19bc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19be:	89 a1       	ldd	r24, Y+33	; 0x21
    19c0:	9a a1       	ldd	r25, Y+34	; 0x22
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	69 f7       	brne	.-38     	; 0x19a0 <Password+0xbe>
    19c6:	14 c0       	rjmp	.+40     	; 0x19f0 <Password+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c8:	6b a1       	ldd	r22, Y+35	; 0x23
    19ca:	7c a1       	ldd	r23, Y+36	; 0x24
    19cc:	8d a1       	ldd	r24, Y+37	; 0x25
    19ce:	9e a1       	ldd	r25, Y+38	; 0x26
    19d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	9a a3       	std	Y+34, r25	; 0x22
    19da:	89 a3       	std	Y+33, r24	; 0x21
    19dc:	89 a1       	ldd	r24, Y+33	; 0x21
    19de:	9a a1       	ldd	r25, Y+34	; 0x22
    19e0:	9e 8f       	std	Y+30, r25	; 0x1e
    19e2:	8d 8f       	std	Y+29, r24	; 0x1d
    19e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19e8:	01 97       	sbiw	r24, 0x01	; 1
    19ea:	f1 f7       	brne	.-4      	; 0x19e8 <Password+0x106>
    19ec:	9e 8f       	std	Y+30, r25	; 0x1e
    19ee:	8d 8f       	std	Y+29, r24	; 0x1d

		_delay_ms(200);

		//Checking if password is valid
		for(i = 0; i < 4; i++)
    19f0:	1c a6       	std	Y+44, r1	; 0x2c
    19f2:	21 c0       	rjmp	.+66     	; 0x1a36 <Password+0x154>
		{
			if(Input_Password[i] == Passwords[Username_Password_Index][i])	//Compare input password with correct password
    19f4:	8c a5       	ldd	r24, Y+44	; 0x2c
    19f6:	88 2f       	mov	r24, r24
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	fc 01       	movw	r30, r24
    19fc:	ec 52       	subi	r30, 0x2C	; 44
    19fe:	fc 4f       	sbci	r31, 0xFC	; 252
    1a00:	60 81       	ld	r22, Z
    1a02:	80 91 d8 03 	lds	r24, 0x03D8
    1a06:	48 2f       	mov	r20, r24
    1a08:	50 e0       	ldi	r21, 0x00	; 0
    1a0a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	ca 01       	movw	r24, r20
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	82 0f       	add	r24, r18
    1a1c:	93 1f       	adc	r25, r19
    1a1e:	fc 01       	movw	r30, r24
    1a20:	e0 56       	subi	r30, 0x60	; 96
    1a22:	fc 4f       	sbci	r31, 0xFC	; 252
    1a24:	80 81       	ld	r24, Z
    1a26:	68 17       	cp	r22, r24
    1a28:	19 f4       	brne	.+6      	; 0x1a30 <Password+0x14e>
			{
				Counter++;	//Counter increases for every matching letter
    1a2a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a2c:	8f 5f       	subi	r24, 0xFF	; 255
    1a2e:	8b a7       	std	Y+43, r24	; 0x2b
		u8 Counter = 0;

		_delay_ms(200);

		//Checking if password is valid
		for(i = 0; i < 4; i++)
    1a30:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a32:	8f 5f       	subi	r24, 0xFF	; 255
    1a34:	8c a7       	std	Y+44, r24	; 0x2c
    1a36:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a38:	84 30       	cpi	r24, 0x04	; 4
    1a3a:	e0 f2       	brcs	.-72     	; 0x19f4 <Password+0x112>
			{
				Counter++;	//Counter increases for every matching letter
			}
		}

		if(Counter == 4)	//password is correct
    1a3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a3e:	84 30       	cpi	r24, 0x04	; 4
    1a40:	09 f0       	breq	.+2      	; 0x1a44 <Password+0x162>
    1a42:	84 c0       	rjmp	.+264    	; 0x1b4c <Password+0x26a>
		{
			Password_valid_login_flag=1;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	80 93 ce 03 	sts	0x03CE, r24
			USART_SendString("Welcome Home! :) \n");
    1a4a:	86 ea       	ldi	r24, 0xA6	; 166
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	0e 94 51 06 	call	0xca2	; 0xca2 <USART_SendString>
			DIO_u8SetPinValue(DIO_u8PORTB , DIO_u8PIN5, DIO_u8PIN_LOW);		// Open Door
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	65 e0       	ldi	r22, 0x05	; 5
    1a56:	40 e0       	ldi	r20, 0x00	; 0
    1a58:	0e 94 4a 08 	call	0x1094	; 0x1094 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8PORTB , DIO_u8PIN6, DIO_u8PIN_HIGH);	// Open Door
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	66 e0       	ldi	r22, 0x06	; 6
    1a60:	41 e0       	ldi	r20, 0x01	; 1
    1a62:	0e 94 4a 08 	call	0x1094	; 0x1094 <DIO_u8SetPinValue>
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	aa e7       	ldi	r26, 0x7A	; 122
    1a6c:	b4 e4       	ldi	r27, 0x44	; 68
    1a6e:	89 8f       	std	Y+25, r24	; 0x19
    1a70:	9a 8f       	std	Y+26, r25	; 0x1a
    1a72:	ab 8f       	std	Y+27, r26	; 0x1b
    1a74:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a76:	69 8d       	ldd	r22, Y+25	; 0x19
    1a78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e4       	ldi	r19, 0x40	; 64
    1a82:	4c e1       	ldi	r20, 0x1C	; 28
    1a84:	55 e4       	ldi	r21, 0x45	; 69
    1a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	8d 8b       	std	Y+21, r24	; 0x15
    1a90:	9e 8b       	std	Y+22, r25	; 0x16
    1a92:	af 8b       	std	Y+23, r26	; 0x17
    1a94:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a96:	6d 89       	ldd	r22, Y+21	; 0x15
    1a98:	7e 89       	ldd	r23, Y+22	; 0x16
    1a9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e8       	ldi	r20, 0x80	; 128
    1aa4:	5f e3       	ldi	r21, 0x3F	; 63
    1aa6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aaa:	88 23       	and	r24, r24
    1aac:	2c f4       	brge	.+10     	; 0x1ab8 <Password+0x1d6>
		__ticks = 1;
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	9c 8b       	std	Y+20, r25	; 0x14
    1ab4:	8b 8b       	std	Y+19, r24	; 0x13
    1ab6:	3f c0       	rjmp	.+126    	; 0x1b36 <Password+0x254>
	else if (__tmp > 65535)
    1ab8:	6d 89       	ldd	r22, Y+21	; 0x15
    1aba:	7e 89       	ldd	r23, Y+22	; 0x16
    1abc:	8f 89       	ldd	r24, Y+23	; 0x17
    1abe:	98 8d       	ldd	r25, Y+24	; 0x18
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	3f ef       	ldi	r19, 0xFF	; 255
    1ac4:	4f e7       	ldi	r20, 0x7F	; 127
    1ac6:	57 e4       	ldi	r21, 0x47	; 71
    1ac8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1acc:	18 16       	cp	r1, r24
    1ace:	4c f5       	brge	.+82     	; 0x1b22 <Password+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ad2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ad4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ad6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e2       	ldi	r20, 0x20	; 32
    1ade:	51 e4       	ldi	r21, 0x41	; 65
    1ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	bc 01       	movw	r22, r24
    1aea:	cd 01       	movw	r24, r26
    1aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	9c 8b       	std	Y+20, r25	; 0x14
    1af6:	8b 8b       	std	Y+19, r24	; 0x13
    1af8:	0f c0       	rjmp	.+30     	; 0x1b18 <Password+0x236>
    1afa:	8a ef       	ldi	r24, 0xFA	; 250
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	9a 8b       	std	Y+18, r25	; 0x12
    1b00:	89 8b       	std	Y+17, r24	; 0x11
    1b02:	89 89       	ldd	r24, Y+17	; 0x11
    1b04:	9a 89       	ldd	r25, Y+18	; 0x12
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	f1 f7       	brne	.-4      	; 0x1b06 <Password+0x224>
    1b0a:	9a 8b       	std	Y+18, r25	; 0x12
    1b0c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b10:	9c 89       	ldd	r25, Y+20	; 0x14
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	9c 8b       	std	Y+20, r25	; 0x14
    1b16:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b18:	8b 89       	ldd	r24, Y+19	; 0x13
    1b1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b1c:	00 97       	sbiw	r24, 0x00	; 0
    1b1e:	69 f7       	brne	.-38     	; 0x1afa <Password+0x218>
    1b20:	90 c0       	rjmp	.+288    	; 0x1c42 <Password+0x360>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b22:	6d 89       	ldd	r22, Y+21	; 0x15
    1b24:	7e 89       	ldd	r23, Y+22	; 0x16
    1b26:	8f 89       	ldd	r24, Y+23	; 0x17
    1b28:	98 8d       	ldd	r25, Y+24	; 0x18
    1b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	9c 8b       	std	Y+20, r25	; 0x14
    1b34:	8b 8b       	std	Y+19, r24	; 0x13
    1b36:	8b 89       	ldd	r24, Y+19	; 0x13
    1b38:	9c 89       	ldd	r25, Y+20	; 0x14
    1b3a:	98 8b       	std	Y+16, r25	; 0x10
    1b3c:	8f 87       	std	Y+15, r24	; 0x0f
    1b3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b40:	98 89       	ldd	r25, Y+16	; 0x10
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <Password+0x260>
    1b46:	98 8b       	std	Y+16, r25	; 0x10
    1b48:	8f 87       	std	Y+15, r24	; 0x0f
    1b4a:	7b c0       	rjmp	.+246    	; 0x1c42 <Password+0x360>
			_delay_ms(1000);
		}
		else
		{
			Password_trials--;	//wrong password -1 trial
    1b4c:	80 91 ca 03 	lds	r24, 0x03CA
    1b50:	81 50       	subi	r24, 0x01	; 1
    1b52:	80 93 ca 03 	sts	0x03CA, r24
			USART_SendString("Invalid Password, Try again \n");
    1b56:	89 eb       	ldi	r24, 0xB9	; 185
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	0e 94 51 06 	call	0xca2	; 0xca2 <USART_SendString>
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	a6 e9       	ldi	r26, 0x96	; 150
    1b64:	b3 e4       	ldi	r27, 0x43	; 67
    1b66:	8b 87       	std	Y+11, r24	; 0x0b
    1b68:	9c 87       	std	Y+12, r25	; 0x0c
    1b6a:	ad 87       	std	Y+13, r26	; 0x0d
    1b6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e4       	ldi	r19, 0x40	; 64
    1b7a:	4c e1       	ldi	r20, 0x1C	; 28
    1b7c:	55 e4       	ldi	r21, 0x45	; 69
    1b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	8f 83       	std	Y+7, r24	; 0x07
    1b88:	98 87       	std	Y+8, r25	; 0x08
    1b8a:	a9 87       	std	Y+9, r26	; 0x09
    1b8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b90:	78 85       	ldd	r23, Y+8	; 0x08
    1b92:	89 85       	ldd	r24, Y+9	; 0x09
    1b94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	40 e8       	ldi	r20, 0x80	; 128
    1b9c:	5f e3       	ldi	r21, 0x3F	; 63
    1b9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ba2:	88 23       	and	r24, r24
    1ba4:	2c f4       	brge	.+10     	; 0x1bb0 <Password+0x2ce>
		__ticks = 1;
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	9e 83       	std	Y+6, r25	; 0x06
    1bac:	8d 83       	std	Y+5, r24	; 0x05
    1bae:	3f c0       	rjmp	.+126    	; 0x1c2e <Password+0x34c>
	else if (__tmp > 65535)
    1bb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb2:	78 85       	ldd	r23, Y+8	; 0x08
    1bb4:	89 85       	ldd	r24, Y+9	; 0x09
    1bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	3f ef       	ldi	r19, 0xFF	; 255
    1bbc:	4f e7       	ldi	r20, 0x7F	; 127
    1bbe:	57 e4       	ldi	r21, 0x47	; 71
    1bc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bc4:	18 16       	cp	r1, r24
    1bc6:	4c f5       	brge	.+82     	; 0x1c1a <Password+0x338>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bce:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	40 e2       	ldi	r20, 0x20	; 32
    1bd6:	51 e4       	ldi	r21, 0x41	; 65
    1bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	bc 01       	movw	r22, r24
    1be2:	cd 01       	movw	r24, r26
    1be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	9e 83       	std	Y+6, r25	; 0x06
    1bee:	8d 83       	std	Y+5, r24	; 0x05
    1bf0:	0f c0       	rjmp	.+30     	; 0x1c10 <Password+0x32e>
    1bf2:	8a ef       	ldi	r24, 0xFA	; 250
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	9c 83       	std	Y+4, r25	; 0x04
    1bf8:	8b 83       	std	Y+3, r24	; 0x03
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	f1 f7       	brne	.-4      	; 0x1bfe <Password+0x31c>
    1c02:	9c 83       	std	Y+4, r25	; 0x04
    1c04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c06:	8d 81       	ldd	r24, Y+5	; 0x05
    1c08:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	9e 83       	std	Y+6, r25	; 0x06
    1c0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c10:	8d 81       	ldd	r24, Y+5	; 0x05
    1c12:	9e 81       	ldd	r25, Y+6	; 0x06
    1c14:	00 97       	sbiw	r24, 0x00	; 0
    1c16:	69 f7       	brne	.-38     	; 0x1bf2 <Password+0x310>
    1c18:	14 c0       	rjmp	.+40     	; 0x1c42 <Password+0x360>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c1c:	78 85       	ldd	r23, Y+8	; 0x08
    1c1e:	89 85       	ldd	r24, Y+9	; 0x09
    1c20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	9e 83       	std	Y+6, r25	; 0x06
    1c2c:	8d 83       	std	Y+5, r24	; 0x05
    1c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c30:	9e 81       	ldd	r25, Y+6	; 0x06
    1c32:	9a 83       	std	Y+2, r25	; 0x02
    1c34:	89 83       	std	Y+1, r24	; 0x01
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3a:	01 97       	sbiw	r24, 0x01	; 1
    1c3c:	f1 f7       	brne	.-4      	; 0x1c3a <Password+0x358>
    1c3e:	9a 83       	std	Y+2, r25	; 0x02
    1c40:	89 83       	std	Y+1, r24	; 0x01
}

void Password(void)
{

	while(Password_trials > 0 && Password_valid_login_flag == 0)
    1c42:	80 91 ca 03 	lds	r24, 0x03CA
    1c46:	88 23       	and	r24, r24
    1c48:	29 f0       	breq	.+10     	; 0x1c54 <Password+0x372>
    1c4a:	80 91 ce 03 	lds	r24, 0x03CE
    1c4e:	88 23       	and	r24, r24
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <Password+0x372>
    1c52:	52 ce       	rjmp	.-860    	; 0x18f8 <Password+0x16>
			USART_SendString("Invalid Password, Try again \n");
			_delay_ms(300);
		}
	}

	if(Password_trials == 0 && Password_valid_login_flag == 0)	//out of trials
    1c54:	80 91 ca 03 	lds	r24, 0x03CA
    1c58:	88 23       	and	r24, r24
    1c5a:	49 f4       	brne	.+18     	; 0x1c6e <Password+0x38c>
    1c5c:	80 91 ce 03 	lds	r24, 0x03CE
    1c60:	88 23       	and	r24, r24
    1c62:	29 f4       	brne	.+10     	; 0x1c6e <Password+0x38c>
	{
	    USART_SendString("Invalid Password, out of tries \n");
    1c64:	87 ed       	ldi	r24, 0xD7	; 215
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	0e 94 51 06 	call	0xca2	; 0xca2 <USART_SendString>
    1c6c:	ff cf       	rjmp	.-2      	; 0x1c6c <Password+0x38a>
	    while(1);
	}
}
    1c6e:	ac 96       	adiw	r28, 0x2c	; 44
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	de bf       	out	0x3e, r29	; 62
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	cd bf       	out	0x3d, r28	; 61
    1c7a:	cf 91       	pop	r28
    1c7c:	df 91       	pop	r29
    1c7e:	08 95       	ret

00001c80 <Options>:

void Options(u8 *pu8Option)
{
    1c80:	df 93       	push	r29
    1c82:	cf 93       	push	r28
    1c84:	00 d0       	rcall	.+0      	; 0x1c86 <Options+0x6>
    1c86:	00 d0       	rcall	.+0      	; 0x1c88 <Options+0x8>
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	9c 83       	std	Y+4, r25	; 0x04
    1c8e:	8b 83       	std	Y+3, r24	; 0x03
	u8 *Local_pu8ReceivedData;

	if(u8MenuFlag == 1)
    1c90:	80 91 c8 03 	lds	r24, 0x03C8
    1c94:	81 30       	cpi	r24, 0x01	; 1
    1c96:	39 f4       	brne	.+14     	; 0x1ca6 <Options+0x26>
	{
	USART_SendString(
    1c98:	88 ef       	ldi	r24, 0xF8	; 248
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	0e 94 51 06 	call	0xca2	; 0xca2 <USART_SendString>
		"-> to turn off the fan press 4 \n"
		"-> to turn on the siren press 5 \n"
		"-> to turn off the siren press 6 \n"
		"-> to repeat the menu press 7 \n \n"
	);
	u8MenuFlag = 0;
    1ca0:	10 92 c8 03 	sts	0x03C8, r1
    1ca4:	04 c0       	rjmp	.+8      	; 0x1cae <Options+0x2e>
	}
	else
	{
		USART_SendString("\n");
    1ca6:	87 e0       	ldi	r24, 0x07	; 7
    1ca8:	92 e0       	ldi	r25, 0x02	; 2
    1caa:	0e 94 51 06 	call	0xca2	; 0xca2 <USART_SendString>
	}
	while(1)
	{
		USART_u8ReceiveCharSynch(Local_pu8ReceivedData);
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb2:	0e 94 8b 06 	call	0xd16	; 0xd16 <USART_u8ReceiveCharSynch>
		if(*Local_pu8ReceivedData > '0')
    1cb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cba:	80 81       	ld	r24, Z
    1cbc:	81 33       	cpi	r24, 0x31	; 49
    1cbe:	b8 f3       	brcs	.-18     	; 0x1cae <Options+0x2e>
			{
				break;
			}
	}
	*pu8Option = *Local_pu8ReceivedData;
    1cc0:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc2:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc4:	80 81       	ld	r24, Z
    1cc6:	eb 81       	ldd	r30, Y+3	; 0x03
    1cc8:	fc 81       	ldd	r31, Y+4	; 0x04
    1cca:	80 83       	st	Z, r24
}
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	cf 91       	pop	r28
    1cd6:	df 91       	pop	r29
    1cd8:	08 95       	ret

00001cda <main>:
#include "../3-MCAL/USART/USART_interface.h"
#include "../2-HAL/DCMTR/DCMTR_interface.h"
#include "Smart_Home_interface.h"

int main(void)
{
    1cda:	df 93       	push	r29
    1cdc:	cf 93       	push	r28
    1cde:	00 d0       	rcall	.+0      	; 0x1ce0 <main+0x6>
    1ce0:	0f 92       	push	r0
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
    1ce6:	0e 94 3c 0a 	call	0x1478	; 0x1478 <PORT_voidInit>
	USART_voidInit();
    1cea:	0e 94 a3 05 	call	0xb46	; 0xb46 <USART_voidInit>

	DIO_u8SetPinValue(DIO_u8PORTB , DIO_u8PIN5, DIO_u8PIN_LOW);		// Close Door
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	65 e0       	ldi	r22, 0x05	; 5
    1cf2:	40 e0       	ldi	r20, 0x00	; 0
    1cf4:	0e 94 4a 08 	call	0x1094	; 0x1094 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTB , DIO_u8PIN6, DIO_u8PIN_LOW);		// Close Door
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	66 e0       	ldi	r22, 0x06	; 6
    1cfc:	40 e0       	ldi	r20, 0x00	; 0
    1cfe:	0e 94 4a 08 	call	0x1094	; 0x1094 <DIO_u8SetPinValue>

	u8 Local_u8ReceivedData;	//variable used to take option entered by user from function "Options"

	Username();
    1d02:	0e 94 9f 0a 	call	0x153e	; 0x153e <Username>
	Password();
    1d06:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <Password>

	while(1)
	{
		Options(&Local_u8ReceivedData);
    1d0a:	ce 01       	movw	r24, r28
    1d0c:	01 96       	adiw	r24, 0x01	; 1
    1d0e:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <Options>

		switch(Local_u8ReceivedData)
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	28 2f       	mov	r18, r24
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	3b 83       	std	Y+3, r19	; 0x03
    1d1a:	2a 83       	std	Y+2, r18	; 0x02
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d20:	84 33       	cpi	r24, 0x34	; 52
    1d22:	91 05       	cpc	r25, r1
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <main+0x4e>
    1d26:	42 c0       	rjmp	.+132    	; 0x1dac <main+0xd2>
    1d28:	2a 81       	ldd	r18, Y+2	; 0x02
    1d2a:	3b 81       	ldd	r19, Y+3	; 0x03
    1d2c:	25 33       	cpi	r18, 0x35	; 53
    1d2e:	31 05       	cpc	r19, r1
    1d30:	84 f4       	brge	.+32     	; 0x1d52 <main+0x78>
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	9b 81       	ldd	r25, Y+3	; 0x03
    1d36:	82 33       	cpi	r24, 0x32	; 50
    1d38:	91 05       	cpc	r25, r1
    1d3a:	29 f1       	breq	.+74     	; 0x1d86 <main+0xac>
    1d3c:	2a 81       	ldd	r18, Y+2	; 0x02
    1d3e:	3b 81       	ldd	r19, Y+3	; 0x03
    1d40:	23 33       	cpi	r18, 0x33	; 51
    1d42:	31 05       	cpc	r19, r1
    1d44:	54 f5       	brge	.+84     	; 0x1d9a <main+0xc0>
    1d46:	8a 81       	ldd	r24, Y+2	; 0x02
    1d48:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4a:	81 33       	cpi	r24, 0x31	; 49
    1d4c:	91 05       	cpc	r25, r1
    1d4e:	89 f0       	breq	.+34     	; 0x1d72 <main+0x98>
    1d50:	4f c0       	rjmp	.+158    	; 0x1df0 <main+0x116>
    1d52:	2a 81       	ldd	r18, Y+2	; 0x02
    1d54:	3b 81       	ldd	r19, Y+3	; 0x03
    1d56:	26 33       	cpi	r18, 0x36	; 54
    1d58:	31 05       	cpc	r19, r1
    1d5a:	d9 f1       	breq	.+118    	; 0x1dd2 <main+0xf8>
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d60:	86 33       	cpi	r24, 0x36	; 54
    1d62:	91 05       	cpc	r25, r1
    1d64:	64 f1       	brlt	.+88     	; 0x1dbe <main+0xe4>
    1d66:	2a 81       	ldd	r18, Y+2	; 0x02
    1d68:	3b 81       	ldd	r19, Y+3	; 0x03
    1d6a:	27 33       	cpi	r18, 0x37	; 55
    1d6c:	31 05       	cpc	r19, r1
    1d6e:	d9 f1       	breq	.+118    	; 0x1de6 <main+0x10c>
    1d70:	3f c0       	rjmp	.+126    	; 0x1df0 <main+0x116>
		{
		case '1' :
			DIO_u8SetPinValue(DIO_u8PORTB , DIO_u8PIN0, DIO_u8PIN_HIGH);	// Turn ON LED
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	60 e0       	ldi	r22, 0x00	; 0
    1d76:	41 e0       	ldi	r20, 0x01	; 1
    1d78:	0e 94 4a 08 	call	0x1094	; 0x1094 <DIO_u8SetPinValue>
			USART_SendString("LED ON \n");	// send status of LED (LED ON)
    1d7c:	89 e0       	ldi	r24, 0x09	; 9
    1d7e:	92 e0       	ldi	r25, 0x02	; 2
    1d80:	0e 94 51 06 	call	0xca2	; 0xca2 <USART_SendString>
    1d84:	c2 cf       	rjmp	.-124    	; 0x1d0a <main+0x30>

			break;

		case '2' :
			DIO_u8SetPinValue(DIO_u8PORTB , DIO_u8PIN0, DIO_u8PIN_LOW);	// Turn OFF LED
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	60 e0       	ldi	r22, 0x00	; 0
    1d8a:	40 e0       	ldi	r20, 0x00	; 0
    1d8c:	0e 94 4a 08 	call	0x1094	; 0x1094 <DIO_u8SetPinValue>
			USART_SendString("LED OFF \n");  //send status of LED (LED OFF)
    1d90:	82 e1       	ldi	r24, 0x12	; 18
    1d92:	92 e0       	ldi	r25, 0x02	; 2
    1d94:	0e 94 51 06 	call	0xca2	; 0xca2 <USART_SendString>
    1d98:	b8 cf       	rjmp	.-144    	; 0x1d0a <main+0x30>
			break;

		case '3' :
			DCMTR_voidRotateCW(DIO_u8PIN2, DIO_u8PIN1);	// turn ON motor
    1d9a:	82 e0       	ldi	r24, 0x02	; 2
    1d9c:	61 e0       	ldi	r22, 0x01	; 1
    1d9e:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <DCMTR_voidRotateCW>
			USART_SendString("FAN ON \n");  //send status of Motor (FAN ON)
    1da2:	8c e1       	ldi	r24, 0x1C	; 28
    1da4:	92 e0       	ldi	r25, 0x02	; 2
    1da6:	0e 94 51 06 	call	0xca2	; 0xca2 <USART_SendString>
    1daa:	af cf       	rjmp	.-162    	; 0x1d0a <main+0x30>
			break;

		case '4' :
			 DCMTR_voidStop( DIO_u8PIN1, DIO_u8PIN2); // turn OFF motor
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	62 e0       	ldi	r22, 0x02	; 2
    1db0:	0e 94 89 0a 	call	0x1512	; 0x1512 <DCMTR_voidStop>
			 USART_SendString("FAN OFF \n");  //send status of Motor (FAN OFF)
    1db4:	85 e2       	ldi	r24, 0x25	; 37
    1db6:	92 e0       	ldi	r25, 0x02	; 2
    1db8:	0e 94 51 06 	call	0xca2	; 0xca2 <USART_SendString>
    1dbc:	a6 cf       	rjmp	.-180    	; 0x1d0a <main+0x30>
		 	break;

		case '5' :
			DIO_u8SetPinValue(DIO_u8PORTB , DIO_u8PIN3, DIO_u8PIN_HIGH);	// Turn ON Siren
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	63 e0       	ldi	r22, 0x03	; 3
    1dc2:	41 e0       	ldi	r20, 0x01	; 1
    1dc4:	0e 94 4a 08 	call	0x1094	; 0x1094 <DIO_u8SetPinValue>
			USART_SendString("Siren ON \n");  //send status of Siren (Siren ON)
    1dc8:	8f e2       	ldi	r24, 0x2F	; 47
    1dca:	92 e0       	ldi	r25, 0x02	; 2
    1dcc:	0e 94 51 06 	call	0xca2	; 0xca2 <USART_SendString>
    1dd0:	9c cf       	rjmp	.-200    	; 0x1d0a <main+0x30>
			break;

		case '6' :
			DIO_u8SetPinValue(DIO_u8PORTB , DIO_u8PIN3, DIO_u8PIN_LOW);	// Turn OFF Siren
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	63 e0       	ldi	r22, 0x03	; 3
    1dd6:	40 e0       	ldi	r20, 0x00	; 0
    1dd8:	0e 94 4a 08 	call	0x1094	; 0x1094 <DIO_u8SetPinValue>
			USART_SendString("Siren OFF \n");  //send status of Siren (Siren OFF)
    1ddc:	8a e3       	ldi	r24, 0x3A	; 58
    1dde:	92 e0       	ldi	r25, 0x02	; 2
    1de0:	0e 94 51 06 	call	0xca2	; 0xca2 <USART_SendString>
    1de4:	92 cf       	rjmp	.-220    	; 0x1d0a <main+0x30>
		 	break;
		case '7' :
			USART_SendString(
    1de6:	86 e4       	ldi	r24, 0x46	; 70
    1de8:	92 e0       	ldi	r25, 0x02	; 2
    1dea:	0e 94 51 06 	call	0xca2	; 0xca2 <USART_SendString>
    1dee:	8d cf       	rjmp	.-230    	; 0x1d0a <main+0x30>
				"-> to repeat the menu press 7 \n \n"
			);
		 	break;

		default :
			USART_SendString("Invalid option \n");	// tell user to enter a valid option
    1df0:	85 e5       	ldi	r24, 0x55	; 85
    1df2:	93 e0       	ldi	r25, 0x03	; 3
    1df4:	0e 94 51 06 	call	0xca2	; 0xca2 <USART_SendString>
    1df8:	88 cf       	rjmp	.-240    	; 0x1d0a <main+0x30>

00001dfa <__prologue_saves__>:
    1dfa:	2f 92       	push	r2
    1dfc:	3f 92       	push	r3
    1dfe:	4f 92       	push	r4
    1e00:	5f 92       	push	r5
    1e02:	6f 92       	push	r6
    1e04:	7f 92       	push	r7
    1e06:	8f 92       	push	r8
    1e08:	9f 92       	push	r9
    1e0a:	af 92       	push	r10
    1e0c:	bf 92       	push	r11
    1e0e:	cf 92       	push	r12
    1e10:	df 92       	push	r13
    1e12:	ef 92       	push	r14
    1e14:	ff 92       	push	r15
    1e16:	0f 93       	push	r16
    1e18:	1f 93       	push	r17
    1e1a:	cf 93       	push	r28
    1e1c:	df 93       	push	r29
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
    1e22:	ca 1b       	sub	r28, r26
    1e24:	db 0b       	sbc	r29, r27
    1e26:	0f b6       	in	r0, 0x3f	; 63
    1e28:	f8 94       	cli
    1e2a:	de bf       	out	0x3e, r29	; 62
    1e2c:	0f be       	out	0x3f, r0	; 63
    1e2e:	cd bf       	out	0x3d, r28	; 61
    1e30:	09 94       	ijmp

00001e32 <__epilogue_restores__>:
    1e32:	2a 88       	ldd	r2, Y+18	; 0x12
    1e34:	39 88       	ldd	r3, Y+17	; 0x11
    1e36:	48 88       	ldd	r4, Y+16	; 0x10
    1e38:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e3a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e3c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e3e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e40:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e42:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e44:	b9 84       	ldd	r11, Y+9	; 0x09
    1e46:	c8 84       	ldd	r12, Y+8	; 0x08
    1e48:	df 80       	ldd	r13, Y+7	; 0x07
    1e4a:	ee 80       	ldd	r14, Y+6	; 0x06
    1e4c:	fd 80       	ldd	r15, Y+5	; 0x05
    1e4e:	0c 81       	ldd	r16, Y+4	; 0x04
    1e50:	1b 81       	ldd	r17, Y+3	; 0x03
    1e52:	aa 81       	ldd	r26, Y+2	; 0x02
    1e54:	b9 81       	ldd	r27, Y+1	; 0x01
    1e56:	ce 0f       	add	r28, r30
    1e58:	d1 1d       	adc	r29, r1
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	f8 94       	cli
    1e5e:	de bf       	out	0x3e, r29	; 62
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	cd bf       	out	0x3d, r28	; 61
    1e64:	ed 01       	movw	r28, r26
    1e66:	08 95       	ret

00001e68 <_exit>:
    1e68:	f8 94       	cli

00001e6a <__stop_program>:
    1e6a:	ff cf       	rjmp	.-2      	; 0x1e6a <__stop_program>
